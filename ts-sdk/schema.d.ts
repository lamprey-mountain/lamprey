/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/v1/admin/broadcast": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Admin broadcast
		 * @description <div class="markdown-alert-permission-required">Admin</div>
		 *
		 *     send a system dm to everyone on the server
		 */
		post: operations["admin_broadcast"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/admin/whisper": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Admin whisper
		 * @description <div class="markdown-alert-permission-required">Admin</div>
		 *
		 *     send a system dm to one person in particular
		 */
		post: operations["admin_whisper"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/app": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * App list
		 * @description
		 */
		get: operations["app_list"];
		put?: never;
		/**
		 * App create
		 * @description
		 */
		post: operations["app_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/app/{app_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * App get
		 * @description
		 */
		get: operations["app_get"];
		put?: never;
		post?: never;
		/**
		 * App delete
		 * @description
		 */
		delete: operations["app_delete"];
		options?: never;
		head?: never;
		/**
		 * App patch
		 * @description
		 */
		patch: operations["app_patch"];
		trace?: never;
	};
	"/api/v1/app/{app_id}/invite": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * App invite bot
		 * @description <div class="markdown-alert-permission-required">BotsAdd</div>
		 *
		 *     Add a bot to a room
		 */
		post: operations["app_invite_bot"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/app/{app_id}/puppet/{puppet_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Puppet ensure
		 * @description
		 */
		put: operations["puppet_ensure"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/app/{app_id}/rotate-secret": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * App rotate oauth secret
		 * @description
		 */
		post: operations["app_rotate_secret"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/app/{app_id}/session": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * App create session
		 * @description
		 */
		post: operations["app_create_session"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Auth state
		 * @description
		 *
		 *     Get the available auth methods for this user
		 */
		get: operations["auth_state"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/_sudo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth sudo (TEMP)
		 * @description
		 *
		 *     instantly upgrade to sudo mode; this is intended for debugging
		 */
		post: operations["auth_sudo"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/captcha/init": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth captcha init (TODO)
		 * @description
		 */
		post: operations["auth_captcha_init"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/captcha/submit": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth captcha submit (TODO)
		 * @description
		 */
		post: operations["auth_captcha_submit"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/email/{addr}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth email exec
		 * @description
		 *
		 *     Send a "magic link" email to login
		 */
		post: operations["auth_email_exec"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/email/{addr}/complete": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth email complete
		 * @description
		 *
		 *     Consume an email auth code to log in
		 */
		post: operations["auth_email_complete"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/email/{addr}/reset": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth email reset
		 * @description
		 *
		 *     Like exec, but the link also resets the password
		 */
		post: operations["auth_email_reset"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/oauth/{provider}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth oauth init
		 * @description
		 */
		post: operations["auth_oauth_init"];
		/**
		 * Auth oauth delete
		 * @description
		 *
		 *     Remove an oauth provider. You will no longer be able to authenticate via
		 *     this provider after this endpoint is called.
		 */
		delete: operations["auth_oauth_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/oauth/{provider}/redirect": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Auth oauth redirect
		 * @description
		 */
		get: operations["auth_oauth_redirect"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/password": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Auth password set
		 * @description
		 */
		put: operations["auth_password_set"];
		/**
		 * Auth password exec
		 * @description
		 */
		post: operations["auth_password_exec"];
		/**
		 * Auth password delete
		 * @description
		 */
		delete: operations["auth_password_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/totp": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth totp execute (TODO)
		 * @description
		 */
		post: operations["auth_totp_exec"];
		/**
		 * Auth totp delete (TODO)
		 * @description
		 */
		delete: operations["auth_totp_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/totp/init": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth totp init (TODO)
		 * @description
		 */
		post: operations["auth_totp_init"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/totp/recovery": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Auth totp recovery codes get (TODO)
		 * @description
		 */
		get: operations["auth_totp_recovery_get"];
		put?: never;
		/**
		 * Auth totp recovery codes rotate (TODO)
		 * @description
		 */
		post: operations["auth_totp_recovery_rotate"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/webauthn/authenticator/{authenticator_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Auth webauthn delete (TODO)
		 * @description
		 */
		delete: operations["auth_webauthn_delete"];
		options?: never;
		head?: never;
		/**
		 * Auth webauthn patch (TODO)
		 * @description
		 */
		patch: operations["auth_webauthn_patch"];
		trace?: never;
	};
	"/api/v1/auth/webauthn/exec": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Auth webauthn exec (TODO)
		 * @description
		 *
		 *     Register a new authenticator or login with one
		 */
		post: operations["auth_webauthn_exec"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/auth/webauthn/init": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Auth webauthn init (TODO)
		 * @description
		 */
		get: operations["auth_webauthn_init"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/calendar/event": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Calendar event list all
		 * @description
		 *
		 *     List all events the current user can see
		 */
		get: operations["calendar_event_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/calendar/{thread_id}/event": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Calendar event list
		 * @description
		 */
		get: operations["calendar_thread_event_list"];
		put?: never;
		/**
		 * Calendar event create
		 * @description
		 */
		post: operations["calendar_thread_event_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/calendar/{thread_id}/event/{calendar_event_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Calendar event get
		 * @description
		 */
		get: operations["calendar_thread_event_get"];
		put?: never;
		post?: never;
		/**
		 * Calendar event delete
		 * @description
		 */
		delete: operations["calendar_thread_event_delete"];
		options?: never;
		head?: never;
		/**
		 * Calendar event update
		 * @description
		 */
		patch: operations["calendar_thread_event_update"];
		trace?: never;
	};
	"/api/v1/calendar/{thread_id}/event/{calendar_event_id}/rsvp": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Calendar rsvp list
		 * @description
		 */
		get: operations["calendar_thread_event_rsvp_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/calendar/{thread_id}/event/{calendar_event_id}/rsvp/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Calendar rsvp get
		 * @description
		 */
		get: operations["calendar_thread_event_rsvp_get"];
		/**
		 * Calendar rsvp create
		 * @description
		 */
		put: operations["calendar_thread_event_rsvp_update"];
		post?: never;
		/**
		 * Calendar rsvp delete
		 * @description
		 */
		delete: operations["calendar_thread_event_rsvp_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Channel create dm
		 * @description
		 *
		 *     Create a dm or group dm thread (outside of a room)
		 */
		post: operations["channel_create_dm"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Channel get
		 * @description
		 */
		get: operations["channel_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Channel edit
		 * @description <div class="markdown-alert-permission-optional">ChannelEdit</div>
		 *     <div class="markdown-alert-permission-optional">ThreadEdit</div>
		 */
		patch: operations["channel_update"];
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/ack": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Channel ack
		 * @description
		 *
		 *     Mark a channel as read (or unread).
		 */
		put: operations["channel_ack"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/archive": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Channel archive
		 * @description <div class="markdown-alert-permission-optional">ChannelManage</div>
		 *     <div class="markdown-alert-permission-optional">ThreadArchive</div>
		 */
		put: operations["channel_archive"];
		post?: never;
		/**
		 * Channel unarchive
		 * @description <div class="markdown-alert-permission-optional">ThreadManage</div>
		 *     <div class="markdown-alert-permission-optional">ChannelManage</div>
		 */
		delete: operations["channel_unarchive"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/context/{message_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message context
		 * @description
		 *
		 *     More efficient than calling List messages twice
		 */
		get: operations["message_context"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/lock": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Channel lock
		 * @description <div class="markdown-alert-permission-required">ThreadLock</div>
		 */
		put: operations["channel_lock"];
		post?: never;
		/**
		 * Channel unlock
		 * @description <div class="markdown-alert-permission-required">ThreadLock</div>
		 */
		delete: operations["channel_unlock"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Messages list
		 * @description
		 *
		 *     Paginate messages in a thread
		 */
		get: operations["message_list"];
		put?: never;
		/**
		 * Message create
		 * @description <div class="markdown-alert-permission-required">MessageCreate</div>
		 *     <div class="markdown-alert-permission-optional">MessageAttachments</div>
		 *     <div class="markdown-alert-permission-optional">MessageEmbeds</div>
		 *     <div class="markdown-alert-permission-optional">MemberBridge</div>
		 *
		 *     Send a message to a channel
		 */
		post: operations["message_create"];
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Message moderate
		 * @description <div class="markdown-alert-permission-optional">MessageDelete</div>
		 *     <div class="markdown-alert-permission-optional">MessageRemove</div>
		 *
		 *     Bulk remove, restore, or delete messages.
		 *
		 *     Deleting a message:
		 *     - Deleted messages remain visible to moderators (and sender, although there's no ui for this).
		 *     - Deleted messages cannot be restored by moderators (ask your local server admin if needed).
		 *     - Deleted messages are garbage collected after 7 days.
		 *
		 *     Removing a message:
		 *     - Removing a message hides it from all non-moderators and the sender.
		 *     - Removal is reversible via restoration, unlike deletion.
		 *     - Removed messages are never garbage collected.
		 *     - This is a "softer" form of deletion, intended for moderators you don't fully trust.
		 *
		 *     Permissions:
		 *     - `MessageDelete` allows deleting messages and viewing deleted messages.
		 *     - `MessageRemove` allows removing/restoring messages and viewing removed messages.
		 *     - Users can always delete (but not remove) their own messages.
		 */
		patch: operations["message_moderate"];
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message/deleted": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message list deleted
		 * @description <div class="markdown-alert-permission-optional">MessageDelete</div>
		 *
		 *     Paginate deleted messages in a thread
		 */
		get: operations["message_list_deleted"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message/removed": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message list removed
		 * @description <div class="markdown-alert-permission-optional">MessageRemove</div>
		 *
		 *     Paginate removed messages in a thread
		 */
		get: operations["message_list_removed"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message/{message_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message get
		 * @description
		 */
		get: operations["message_get"];
		put?: never;
		post?: never;
		/**
		 * Message delete (TEMP?)
		 * @description
		 *
		 *     Note that this endpoint allows deleting your own messages, while message
		 *     moderate always requires the full permission
		 */
		delete: operations["message_delete"];
		options?: never;
		head?: never;
		/**
		 * Message edit
		 * @description
		 */
		patch: operations["message_edit"];
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message/{message_id}/reaction": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Reaction purge
		 * @description <div class="markdown-alert-permission-required">ReactionClear</div>
		 *
		 *     Remove all reactions from a message.
		 */
		delete: operations["reaction_purge"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message/{message_id}/reaction/{key}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Reaction list
		 * @description
		 *
		 *     List message reactions for a specific emoji.
		 */
		get: operations["reaction_list"];
		/**
		 * Reaction add
		 * @description <div class="markdown-alert-permission-required">ReactionAdd</div>
		 *
		 *     Add a reaction to a message.
		 */
		put: operations["reaction_add"];
		post?: never;
		/**
		 * Reaction remove
		 * @description <div class="markdown-alert-permission-required">ReactionAdd</div>
		 *
		 *     Remove a reaction from a message.
		 */
		delete: operations["reaction_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message/{message_id}/version": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message version list
		 * @description
		 */
		get: operations["message_version_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/message/{message_id}/version/{version_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message version get
		 * @description
		 */
		get: operations["message_version_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/migrate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Message move (TODO)
		 * @description <div class="markdown-alert-permission-required">MessageMove</div>
		 *
		 *     Move messages from one thread to another. Requires `MessageMove` in both the
		 *     source and target thread.
		 */
		post: operations["message_move"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/permission/{overwrite_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Permission overwrite
		 * @description <div class="markdown-alert-permission-required">RoleManage</div>
		 */
		put: operations["permission_overwrite"];
		post?: never;
		/**
		 * Permission delete
		 * @description <div class="markdown-alert-permission-required">RoleManage</div>
		 */
		delete: operations["permission_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/pin": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message pin list
		 * @description
		 */
		get: operations["message_pin_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Pin reorder
		 * @description <div class="markdown-alert-permission-required">MessagePin</div>
		 */
		patch: operations["message_pin_reorder"];
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/pin/{message_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Pin create
		 * @description <div class="markdown-alert-permission-required">MessagePin</div>
		 *
		 *     - Newly pinned messages are pinned to the top (position 0).
		 *     - There can be a maximum of 1024 pinned messages.
		 */
		put: operations["message_pin_create"];
		post?: never;
		/**
		 * Pin delete
		 * @description <div class="markdown-alert-permission-required">MessagePin</div>
		 */
		delete: operations["message_pin_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/remove": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Channel remove
		 * @description <div class="markdown-alert-permission-required">ThreadDelete</div>
		 */
		put: operations["channel_remove"];
		post?: never;
		/**
		 * Channel restore
		 * @description <div class="markdown-alert-permission-required">ThreadDelete</div>
		 */
		delete: operations["channel_restore"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/reply": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message roots
		 * @description
		 */
		get: operations["message_roots"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/reply/{message_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Message replies
		 * @description
		 */
		get: operations["message_replies"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/transfer-ownership": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Channel transfer ownership
		 * @description
		 */
		post: operations["channel_transfer_ownership"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/typing": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Channel trigger typing indicator
		 * @description <div class="markdown-alert-permission-required">MessageCreate</div>
		 *
		 *     Send a typing notification to a thread
		 */
		post: operations["channel_typing"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/upgrade": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Channel upgrade
		 * @description
		 *
		 *     Convert a group dm thread into a full room. Only the gdm creator can upgrade the thread.
		 */
		post: operations["channel_upgrade"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/channel/{channel_id}/webhook": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Webhook list thread (TODO)
		 * @description
		 */
		get: operations["list_webhooks_thread"];
		put?: never;
		/**
		 * Webhook create (TODO)
		 * @description
		 */
		post: operations["create_webhook"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/config": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User config global get
		 * @description
		 */
		get: operations["user_config_global_get"];
		/**
		 * User config global put
		 * @description
		 */
		put: operations["user_config_global_put"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/config/channel/{channel_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User config channel get
		 * @description
		 */
		get: operations["user_config_channel_get"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/config/room/{room_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User config room get
		 * @description
		 */
		get: operations["user_config_room_get"];
		/**
		 * User config room put
		 * @description
		 */
		put: operations["user_config_room_put"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/config/thread/{thread_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * User config channel put
		 * @description
		 */
		put: operations["user_config_channel_put"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/config/user/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User config user get
		 * @description
		 */
		get: operations["user_config_user_get"];
		/**
		 * User config user put
		 * @description
		 */
		put: operations["user_config_user_put"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/debug/embed-url": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Embed a url
		 * @description
		 */
		post: operations["debug_embed_url"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/debug/info": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get server info
		 * @description
		 *
		 *     in the future, this will become a stable route
		 */
		get: operations["debug_info"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/debug/panic": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Trigger a panic
		 * @description
		 */
		get: operations["debug_panic"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/debug/version": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get server version
		 * @description
		 */
		get: operations["debug_version"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/emoji/{emoji_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Emoji lookup
		 * @description
		 *
		 *     Get info about an emoji.
		 */
		get: operations["emoji_lookup"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/guest": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Guest create
		 * @description
		 *
		 *     Create a guest account, with limited access to the platform.
		 *
		 *     - guests can read but not write public rooms, threads, messages, etc
		 *     - when using an invite, they can act like a standard account in that one specific room/thread
		 *     - they can be given an invite to a public room to bypass
		 */
		post: operations["guest_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/inbox": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inbox get
		 * @description
		 *
		 *     List notifications
		 */
		get: operations["inbox_get"];
		put?: never;
		/**
		 * Inbox post
		 * @description
		 *
		 *     Create a reminder for later
		 */
		post: operations["inbox_post"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/inbox/channels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Inbox channels
		 * @description
		 *
		 *     Get a list of all unread channel
		 */
		get: operations["inbox_channels"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/inbox/flush": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Inbox flush
		 * @description
		 *
		 *     Deletes read notifications from the inbox
		 */
		post: operations["inbox_flush"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/inbox/mark-read": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Inbox mark read
		 * @description
		 */
		post: operations["inbox_mark_read"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/inbox/mark-unread": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Inbox mark unread
		 * @description
		 */
		post: operations["inbox_mark_unread"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/internal/rpc": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Internal rpc
		 * @description
		 */
		get: operations["internal_rpc"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/invite/{invite_code}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Invite resolve
		 * @description
		 */
		get: operations["invite_resolve"];
		put?: never;
		/**
		 * Invite use
		 * @description
		 *
		 *     - A room invite will add the user to the room
		 *     - A thread invite will currently do the same thing as a room invite
		 *     - A server invite will upgrade the user to a full account
		 *
		 *     using a server invite may require the guest to first
		 *
		 *     - solve an antispam challenge, such as a captcha
		 *     - add an authentication method, such as (email && password) || oauth
		 */
		post: operations["invite_use"];
		/**
		 * Invite delete
		 * @description <div class="markdown-alert-permission-optional">InviteManage</div>
		 */
		delete: operations["invite_delete"];
		options?: never;
		head?: never;
		/**
		 * Invite patch
		 * @description <div class="markdown-alert-permission-optional">InviteManage</div>
		 *
		 *     Edit an invite
		 */
		patch: operations["invite_patch"];
		trace?: never;
	};
	"/api/v1/media": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Media create
		 * @description
		 *
		 *     Create a new url to upload media to. Use the media upload endpoint for actually uploading media. Media not referenced/used in other api calls will be removed after a period of time.
		 */
		post: operations["media_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/media/{media_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Media get
		 * @description
		 */
		get: operations["media_get"];
		put?: never;
		post?: never;
		/**
		 * Media delete
		 * @description
		 *
		 *     Delete unlinked media. Does not work if its linked to some other resource.
		 */
		delete: operations["media_delete"];
		options?: never;
		head?: never;
		/**
		 * Media patch
		 * @description
		 */
		patch: operations["media_patch"];
		trace?: never;
	};
	"/api/v1/media/{media_id}/done": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Media done
		 * @description
		 *
		 *     finishes a media upload. at this point, the media becomes immutable
		 */
		put: operations["media_done"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/oauth/.well-known/openid-configuration": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Oauth autoconfig
		 * @description
		 */
		get: operations["oauth_autoconfig"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/oauth/authorize": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Oauth info
		 * @description
		 */
		get: operations["oauth_info"];
		put?: never;
		/**
		 * Oauth authorize
		 * @description
		 */
		post: operations["oauth_authorize"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/oauth/introspect": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Oauth introspect
		 * @description
		 */
		post: operations["oauth_introspect"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/oauth/revoke": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Oauth revoke
		 * @description
		 */
		post: operations["oauth_revoke"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/oauth/token": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Oauth exchange token
		 * @description
		 *
		 *     exchange an authorization token for an access token
		 */
		post: operations["oauth_token"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/oauth/userinfo": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Oauth userinfo
		 * @description
		 */
		get: operations["oauth_userinfo"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/public/channels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Public channels list (TODO)
		 * @description
		 */
		get: operations["public_channels"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/public/rooms": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Public rooms list (TODO)
		 * @description
		 */
		get: operations["public_rooms"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room list
		 * @description
		 *
		 *     Lists all rooms on the server.
		 */
		get: operations["room_list"];
		put?: never;
		/**
		 * Room create
		 * @description
		 */
		post: operations["room_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room get
		 * @description
		 */
		get: operations["room_get"];
		put?: never;
		post?: never;
		/**
		 * Room delete
		 * @description
		 */
		delete: operations["room_delete"];
		options?: never;
		head?: never;
		/**
		 * Room edit
		 * @description <div class="markdown-alert-permission-required">RoomManage</div>
		 */
		patch: operations["room_edit"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/ack": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Room ack
		 * @description
		 *
		 *     Mark all channels in a room as read.
		 */
		put: operations["room_ack"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/audit-logs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room audit logs
		 * @description <div class="markdown-alert-permission-required">ViewAuditLog</div>
		 */
		get: operations["room_audit_logs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/automod": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Automod rule list (TODO)
		 * @description
		 */
		get: operations["list_rules"];
		put?: never;
		/**
		 * Automod rule create (TODO)
		 * @description
		 */
		post: operations["create_rule"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/automod/{rule_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Automod rule get (TODO)
		 * @description
		 */
		get: operations["get_rule"];
		put?: never;
		post?: never;
		/**
		 * Automod rule delete (TODO)
		 * @description
		 */
		delete: operations["delete_rule"];
		options?: never;
		head?: never;
		/**
		 * Automod rule update (TODO)
		 * @description
		 */
		patch: operations["update_rule"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/ban": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room ban list
		 * @description <div class="markdown-alert-permission-required">MemberBan</div>
		 */
		get: operations["room_ban_list"];
		put?: never;
		/**
		 * Room ban create bulk
		 * @description <div class="markdown-alert-permission-required">MemberBan</div>
		 */
		post: operations["room_ban_create_bulk"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/ban/search": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room ban search (TODO)
		 * @description <div class="markdown-alert-permission-required">MemberBan</div>
		 */
		get: operations["room_ban_search"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/ban/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room ban get
		 * @description <div class="markdown-alert-permission-required">MemberBan</div>
		 */
		get: operations["room_ban_get"];
		/**
		 * Room ban create
		 * @description <div class="markdown-alert-permission-required">MemberBan</div>
		 */
		put: operations["room_ban_create"];
		post?: never;
		/**
		 * Room ban remove
		 * @description <div class="markdown-alert-permission-required">MemberBan</div>
		 */
		delete: operations["room_ban_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/channel": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room channel list
		 * @description
		 */
		get: operations["channel_list"];
		put?: never;
		/**
		 * Room channel create
		 * @description <div class="markdown-alert-permission-optional">ChannelManage</div>
		 *     <div class="markdown-alert-permission-optional">ThreadCreatePublic</div>
		 *     <div class="markdown-alert-permission-optional">ThreadCreatePrivate</div>
		 *
		 *     Create a channel in a room
		 */
		post: operations["channel_create_room"];
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Room channel reorder
		 * @description <div class="markdown-alert-permission-required">ChannelManage</div>
		 *
		 *     Reorder the channels in a room. Requires the `ChannelManage` permission.
		 */
		patch: operations["channel_reorder"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/channel/archived": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room channel list archived
		 * @description
		 */
		get: operations["channel_list_archived"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/emoji": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Emoji list
		 * @description
		 *
		 *     List emoji in a room.
		 */
		get: operations["emoji_list"];
		put?: never;
		/**
		 * Emoji create
		 * @description <div class="markdown-alert-permission-required">EmojiAdd</div>
		 *
		 *     Create a custom emoji.
		 */
		post: operations["emoji_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/emoji/{emoji_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Emoji get
		 * @description
		 *
		 *     Get a custom emoji.
		 */
		get: operations["emoji_get"];
		put?: never;
		post?: never;
		/**
		 * Emoji delete
		 * @description <div class="markdown-alert-permission-required">EmojiAdd</div>
		 *
		 *     Delete a custom emoji.
		 */
		delete: operations["emoji_delete"];
		options?: never;
		head?: never;
		/**
		 * Emoji update
		 * @description
		 *
		 *     Edit a custom emoji.
		 */
		patch: operations["emoji_update"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/integration": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room integration list
		 * @description
		 *
		 *     list bots in a room
		 */
		get: operations["room_integration_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/invite": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Invite room list
		 * @description
		 *
		 *     List invites that go to a room
		 */
		get: operations["invite_room_list"];
		put?: never;
		/**
		 * Invite room create
		 * @description <div class="markdown-alert-permission-required">InviteCreate</div>
		 *
		 *     Create an invite that goes to a room
		 */
		post: operations["invite_room_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/member": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room member list
		 * @description
		 */
		get: operations["room_member_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/member/search": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room member search
		 * @description
		 */
		get: operations["room_member_search"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/member/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room member get
		 * @description
		 */
		get: operations["room_member_get"];
		/**
		 * Room member add
		 * @description <div class="markdown-alert-permission-required">MemberBridge</div>
		 *     <div class="markdown-alert-permission-optional">VoiceMute</div>
		 *     <div class="markdown-alert-permission-optional">VoiceDeafen</div>
		 *     <div class="markdown-alert-permission-optional">MemberManage</div>
		 *     <div class="markdown-alert-permission-optional">RoleApply</div>
		 *
		 *     Only `Puppet` users can be added to rooms (via MemberBridge permission)
		 */
		put: operations["room_member_add"];
		post?: never;
		/**
		 * Room member delete (kick/leave)
		 * @description <div class="markdown-alert-permission-optional">MemberKick</div>
		 */
		delete: operations["room_member_delete"];
		options?: never;
		head?: never;
		/**
		 * Room member update
		 * @description <div class="markdown-alert-permission-optional">VoiceMute</div>
		 *     <div class="markdown-alert-permission-optional">VoiceDeafen</div>
		 *     <div class="markdown-alert-permission-optional">MemberManage</div>
		 *     <div class="markdown-alert-permission-optional">RoleApply</div>
		 */
		patch: operations["room_member_update"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/metrics": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room metrics
		 * @description
		 *
		 *     Get metrics for a room
		 */
		get: operations["room_metrics"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/quarantine": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Room quarantine
		 * @description <div class="markdown-alert-permission-required">Admin</div>
		 */
		post: operations["room_quarantine"];
		/**
		 * Room unquarantine
		 * @description <div class="markdown-alert-permission-required">Admin</div>
		 */
		delete: operations["room_unquarantine"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/report": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Report create room (TODO)
		 * @description
		 *
		 *     Create and send a report to the room admins/moderators
		 */
		post: operations["report_create_room"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/role": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Role list
		 * @description
		 */
		get: operations["role_list"];
		put?: never;
		/**
		 * Role create
		 * @description <div class="markdown-alert-permission-required">RoleManage</div>
		 */
		post: operations["role_create"];
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Role reorder
		 * @description <div class="markdown-alert-permission-required">RoleManage</div>
		 */
		patch: operations["role_reorder"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/role/{role_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Role get
		 * @description
		 */
		get: operations["role_get"];
		put?: never;
		post?: never;
		/**
		 * Role delete
		 * @description <div class="markdown-alert-permission-required">RoleManage</div>
		 */
		delete: operations["role_delete"];
		options?: never;
		head?: never;
		/**
		 * Role update
		 * @description <div class="markdown-alert-permission-required">RoleManage</div>
		 */
		patch: operations["role_update"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/role/{role_id}/member": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Role list members
		 * @description
		 */
		get: operations["role_member_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Role member bulk edit
		 * @description
		 */
		patch: operations["role_member_bulk_edit"];
		trace?: never;
	};
	"/api/v1/room/{room_id}/role/{role_id}/member/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Role member apply
		 * @description <div class="markdown-alert-permission-required">RoleApply</div>
		 */
		put: operations["role_member_add"];
		post?: never;
		/**
		 * Role member remove
		 * @description <div class="markdown-alert-permission-required">RoleApply</div>
		 */
		delete: operations["role_member_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/thread/removed": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Room channel list removed
		 * @description
		 *
		 *     List removed threads in a room. Requires the `ThreadDelete` permission.
		 */
		get: operations["channel_list_removed"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/transfer-ownership": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Room transfer ownership
		 * @description
		 */
		post: operations["room_transfer_ownership"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/undelete": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Room undelete
		 * @description <div class="markdown-alert-permission-required">Admin</div>
		 */
		post: operations["room_undelete"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/room/{room_id}/webhook": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Webhook list room (TODO)
		 * @description
		 */
		get: operations["list_webhooks_room"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/search/channels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Search channels
		 * @description
		 */
		post: operations["search_channels"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/search/message": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Search messages
		 * @description
		 */
		post: operations["search_messages"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/search/room": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Search rooms (TODO)
		 * @description
		 */
		post: operations["search_rooms"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/server/invite": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Invite server list
		 * @description
		 *
		 *     List invites that allow registration on a server
		 */
		get: operations["invite_server_list"];
		put?: never;
		/**
		 * Invite server create
		 * @description <div class="markdown-alert-permission-required">InviteCreate</div>
		 *
		 *     Create an invite that allows registration on a server.
		 */
		post: operations["invite_server_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/server/report": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Report create server (TODO)
		 * @description
		 *
		 *     Create and send a report to the server operators
		 */
		post: operations["report_create_server"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/session": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Session list
		 * @description
		 */
		get: operations["session_list"];
		put?: never;
		/**
		 * Session create
		 * @description
		 */
		post: operations["session_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/session/{session_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Session get
		 * @description
		 */
		get: operations["session_get"];
		put?: never;
		post?: never;
		/**
		 * Session delete
		 * @description
		 */
		delete: operations["session_delete"];
		options?: never;
		head?: never;
		/**
		 * Session update
		 * @description
		 */
		patch: operations["session_update"];
		trace?: never;
	};
	"/api/v1/thread/{thread_id}/invite": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Invite thread list
		 * @description
		 *
		 *     List invites that go to a thread
		 */
		get: operations["invite_channel_list"];
		put?: never;
		/**
		 * Invite thread create
		 * @description <div class="markdown-alert-permission-required">InviteCreate</div>
		 *
		 *     Create an invite that goes to a thread
		 */
		post: operations["invite_channel_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/thread/{thread_id}/member": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Thread member list
		 * @description
		 */
		get: operations["thread_member_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/thread/{thread_id}/member/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Thread member get
		 * @description
		 */
		get: operations["thread_member_get"];
		/**
		 * Thread member add
		 * @description <div class="markdown-alert-permission-optional">MemberKick</div>
		 */
		put: operations["thread_member_add"];
		post?: never;
		/**
		 * Thread member delete
		 * @description <div class="markdown-alert-permission-optional">MemberKick</div>
		 */
		delete: operations["thread_member_delete"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User list
		 * @description
		 *
		 *     Admin only. List all users on this server.
		 */
		get: operations["user_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/@self/block/{target_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Block add
		 * @description
		 *
		 *     Block a user. Removes them as a friend if they are one.
		 */
		put: operations["block_add"];
		post?: never;
		/**
		 * Block remove
		 * @description
		 *
		 *     Unblock a user.
		 */
		delete: operations["block_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/@self/dm/{target_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Dm get
		 * @description
		 *
		 *     Get a direct message room.
		 */
		get: operations["dm_get"];
		put?: never;
		/**
		 * Dm initialize
		 * @description
		 *
		 *     Get or create a direct message thread.
		 */
		post: operations["dm_init"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/@self/friend/{target_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Friend add
		 * @description
		 *
		 *     Send or accept a friend request.
		 */
		put: operations["friend_add"];
		post?: never;
		/**
		 * Friend remove
		 * @description
		 *
		 *     Remove friend or reject a friend request.
		 */
		delete: operations["friend_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User get
		 * @description
		 *
		 *     Get another user, including your relationship
		 */
		get: operations["user_get"];
		put?: never;
		post?: never;
		/**
		 * User delete
		 * @description
		 */
		delete: operations["user_delete"];
		options?: never;
		head?: never;
		/**
		 * User update
		 * @description
		 */
		patch: operations["user_update"];
		trace?: never;
	};
	"/api/v1/user/{user_id}/audit-logs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User audit logs
		 * @description
		 */
		get: operations["user_audit_logs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/block": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Block list
		 * @description
		 *
		 *     List blocked users.
		 */
		get: operations["block_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/connection": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Connection list
		 * @description
		 */
		get: operations["connection_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/connection/{app_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Connection revoke
		 * @description
		 */
		delete: operations["connection_revoke"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/dm": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Dm list
		 * @description
		 *
		 *     List direct message channels. Ordered by the last message version id, so
		 *     recently active dms come first.
		 */
		get: operations["dm_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/email": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Email list
		 * @description
		 */
		get: operations["email_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/email/{addr}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Email add
		 * @description
		 */
		put: operations["email_add"];
		post?: never;
		/**
		 * Email delete
		 * @description
		 */
		delete: operations["email_delete"];
		options?: never;
		head?: never;
		/**
		 * Email update
		 * @description
		 */
		patch: operations["email_update"];
		trace?: never;
	};
	"/api/v1/user/{user_id}/email/{addr}/resend-verification": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Email verification resend
		 * @description
		 */
		post: operations["email_verification_resend"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/email/{addr}/verify/{code}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Email verify finish
		 * @description
		 */
		post: operations["email_verification_finish"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/friend": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Friend list
		 * @description
		 *
		 *     List (mutual) friends.
		 */
		get: operations["friend_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/invite": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Invite user list
		 * @description
		 */
		get: operations["invite_user_list"];
		put?: never;
		/**
		 * Invite user create
		 * @description
		 *
		 *     Creates an invite that adds this user as a friend when used
		 */
		post: operations["invite_user_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/room": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * User rooms list
		 * @description
		 *
		 *     List rooms a user is in. If you are not the user, lists mutual rooms.
		 */
		get: operations["user_room_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/status": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * User set status
		 * @description
		 *
		 *     for puppets
		 */
		post: operations["user_set_status"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/suspend": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * User suspend
		 * @description
		 */
		post: operations["user_suspend"];
		/**
		 * User unsuspend
		 * @description
		 */
		delete: operations["user_unsuspend"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/user/{user_id}/undelete": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * User undelete
		 * @description
		 *
		 *     Allows undeleting a user provided they haven't been garbage collected yet
		 */
		post: operations["user_undelete"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/voice/region": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Voice region list (TODO)
		 * @description
		 */
		get: operations["voice_region_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/voice/{thread_id}/member": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Voice state list
		 * @description
		 */
		get: operations["voice_state_list"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/voice/{thread_id}/member/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Voice state get
		 * @description
		 */
		get: operations["voice_state_get"];
		put?: never;
		post?: never;
		/**
		 * Voice state disconnect
		 * @description <div class="markdown-alert-permission-required">VoiceDisconnect</div>
		 */
		delete: operations["voice_state_disconnect"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/voice/{thread_id}/member/{user_id}/move": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Voice state move
		 * @description <div class="markdown-alert-permission-required">VoiceMove</div>
		 */
		post: operations["voice_state_move"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/webhook/{webhook_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Webhook get (TODO)
		 * @description
		 */
		get: operations["get_webhook"];
		put?: never;
		post?: never;
		/**
		 * Webhook delete (TODO)
		 * @description
		 */
		delete: operations["delete_webhook"];
		options?: never;
		head?: never;
		/**
		 * Webhook update (TODO)
		 * @description
		 */
		patch: operations["update_webhook"];
		trace?: never;
	};
	"/api/v1/webhook/{webhook_id}/{token}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Webhook get with token (TODO)
		 * @description
		 */
		get: operations["get_webhook_with_token"];
		put?: never;
		/**
		 * Webhook execute (TODO)
		 * @description
		 */
		post: operations["execute_webhook"];
		/**
		 * Webhook delete with token (TODO)
		 * @description
		 */
		delete: operations["delete_webhook_with_token"];
		options?: never;
		head?: never;
		/**
		 * Webhook update with token (TODO)
		 * @description
		 */
		patch: operations["update_webhook_with_token"];
		trace?: never;
	};
	"/api/v1/webhook/{webhook_id}/{token}/discord": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Webhook execute discord (TODO)
		 * @description
		 */
		post: operations["execute_webhook_discord"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/webhook/{webhook_id}/{token}/github": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Webhook execute github (TODO)
		 * @description
		 */
		post: operations["execute_webhook_github"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/v1/webhook/{webhook_id}/{token}/slack": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Webhook execute slack (TODO)
		 * @description
		 */
		post: operations["execute_webhook_slack"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		AckReq: {
			message_id?: null | components["schemas"]["Id"];
			/** @description The last read id in this channel. */
			version_id: components["schemas"]["Id"];
		};
		AdminBroadcast: {
			message: components["schemas"]["MessageCreate"];
		};
		AdminWhisper: {
			message: components["schemas"]["MessageCreate"];
			user_id: components["schemas"]["Id"];
		};
		AppInviteBot: {
			room_id: components["schemas"]["Id"];
		};
		Application: {
			/** @description enables managing Puppet users */
			bridge: boolean;
			description?: string | null;
			id: components["schemas"]["Id"];
			name: string;
			/** @description oauth whether this client can keep secrets confidential */
			oauth_confidential: boolean;
			oauth_redirect_uris?: string[];
			/** @description only returned on oauth token rotate endpoint */
			oauth_secret?: string | null;
			owner_id: components["schemas"]["Id"];
			/** @description if anyone can use this */
			public: boolean;
		};
		ApplicationCreate: {
			/** @description enables managing Puppet users */
			bridge?: boolean;
			description?: string | null;
			name: string;
			oauth_confidential?: boolean | null;
			oauth_redirect_uris?: string[];
			/** @description if anyone can use this */
			public?: boolean;
		};
		ApplicationIdReq: null | components["schemas"]["Id"];
		ApplicationPatch: {
			/** @description enables managing Puppet users */
			bridge?: boolean | null;
			description?: string | null;
			name?: string | null;
			oauth_confidential?: boolean | null;
			oauth_redirect_uris?: string[] | null;
			/** @description if anyone can use this */
			public?: boolean | null;
		};
		/** @description metadata for audio */
		Audio: {
			codec: string;
			/** Format: int64 */
			duration: number;
			language?: null | components["schemas"]["Language"];
		};
		AuditLogChange: {
			key: string;
			new: unknown;
			old: unknown;
		};
		AuditLogEntry: components["schemas"]["AuditLogEntryType"] & {
			/** @description Unique id idenfitying this entry */
			id: components["schemas"]["Id"];
			/** @description User supplied reason why this happened */
			reason?: string | null;
			/** @description Room this happened in. Is user_id for user audit logs. */
			room_id: components["schemas"]["Id"];
			session_id?: null | components["schemas"]["Id"];
			/** @description User who caused this entry to be created */
			user_id: components["schemas"]["Id"];
		};
		AuditLogEntryType: {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "RoomCreate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "RoomUpdate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				channel_id: components["schemas"]["Id"];
				channel_type: components["schemas"]["ChannelType"];
			};
			/** @enum {string} */
			type: "ChannelCreate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				channel_id: components["schemas"]["Id"];
				channel_type: components["schemas"]["ChannelType"];
			};
			/** @enum {string} */
			type: "ChannelUpdate";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MessageDelete";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
				version_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MessageVersionDelete";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_ids: components["schemas"]["Id"][];
			};
			/** @enum {string} */
			type: "MessageDeleteBulk";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_ids: components["schemas"]["Id"][];
			};
			/** @enum {string} */
			type: "MessageRemove";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_ids: components["schemas"]["Id"][];
			};
			/** @enum {string} */
			type: "MessageRestore";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "RoleCreate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "RoleUpdate";
		} | {
			metadata: {
				role_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "RoleDelete";
		} | {
			metadata: {
				roles: components["schemas"]["RoleReorderItem"][];
			};
			/** @enum {string} */
			type: "RoleReorder";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "InviteCreate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "InviteUpdate";
		} | {
			metadata: {
				code: components["schemas"]["InviteCode"];
			};
			/** @enum {string} */
			type: "InviteDelete";
		} | {
			/** @description remove all reactions */
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "ReactionPurge";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "EmojiCreate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "EmojiUpdate";
		} | {
			metadata: {
				emoji_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "EmojiDelete";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				channel_id: components["schemas"]["Id"];
				/** Format: uuid */
				overwrite_id: string;
				type: components["schemas"]["PermissionOverwriteType"];
			};
			/** @enum {string} */
			type: "PermissionOverwriteSet";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				/** Format: uuid */
				overwrite_id: string;
			};
			/** @enum {string} */
			type: "PermissionOverwriteDelete";
		} | {
			metadata: {
				room_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MemberKick";
		} | {
			metadata: {
				room_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MemberBan";
		} | {
			metadata: {
				room_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MemberUnban";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				room_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MemberUpdate";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MemberDisconnect";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MemberMove";
		} | {
			metadata: {
				role_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "RoleApply";
		} | {
			metadata: {
				role_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "RoleUnapply";
		} | {
			metadata: {
				bot_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "BotAdd";
		} | {
			metadata: {
				thread_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "ThreadMemberAdd";
		} | {
			metadata: {
				thread_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "ThreadMemberRemove";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "UserUpdate";
		} | {
			metadata: {
				expires_at?: null | components["schemas"]["Time"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "UserSuspend";
		} | {
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "UserUnsuspend";
		} | {
			/** @description friend request sent to another user */
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "FriendRequest";
		} | {
			/** @description friend request from another user accepted */
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "FriendAccept";
		} | {
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "FriendDelete";
		} | {
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "BlockCreate";
		} | {
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "BlockDelete";
		} | {
			metadata: {
				session_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "SessionLogin";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				session_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "SessionUpdate";
		} | {
			metadata: {
				session_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "SessionDelete";
		} | {
			/** @description auth state changed */
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "AuthUpdate";
		} | {
			/** @description user entered sudo mode */
			metadata: {
				session_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "AuthSudo";
		} | {
			metadata: {
				application_id: components["schemas"]["Id"];
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "ApplicationCreate";
		} | {
			metadata: {
				application_id: components["schemas"]["Id"];
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "ApplicationUpdate";
		} | {
			metadata: {
				application_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "ApplicationDelete";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				email: components["schemas"]["EmailAddr"];
			};
			/** @enum {string} */
			type: "EmailCreate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				email: components["schemas"]["EmailAddr"];
			};
			/** @enum {string} */
			type: "EmailUpdate";
		} | {
			metadata: {
				email: components["schemas"]["EmailAddr"];
			};
			/** @enum {string} */
			type: "EmailDelete";
		} | {
			metadata: {
				application_id: components["schemas"]["Id"];
				scopes: components["schemas"]["Scope"][];
			};
			/** @enum {string} */
			type: "ConnectionCreate";
		} | {
			metadata: {
				application_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "ConnectionDelete";
		} | {
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "UserRegistered";
		} | {
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "UserDelete";
		} | {
			metadata: {
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "UserUndelete";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
				user_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "AdminWhisper";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "AdminBroadcast";
		} | {
			metadata: {
				room_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "RoomDelete";
		} | {
			metadata: {
				room_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "RoomUndelete";
		} | {
			metadata: {
				room_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "RoomQuarantine";
		} | {
			metadata: {
				room_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "RoomUnquarantine";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MessagePin";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MessageUnpin";
		} | {
			metadata: {
				channel_id: components["schemas"]["Id"];
			};
			/** @enum {string} */
			type: "MessagePinReorder";
		} | {
			metadata: {
				channels: components["schemas"]["ChannelReorderItem"][];
			};
			/** @enum {string} */
			type: "ChannelReorder";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "CalendarEventCreate";
		} | {
			metadata: {
				changes: components["schemas"]["AuditLogChange"][];
			};
			/** @enum {string} */
			type: "CalendarEventUpdate";
		} | {
			metadata: {
				event_id: components["schemas"]["Id"];
				title: string;
			};
			/** @enum {string} */
			type: "CalendarEventDelete";
		};
		AuthEmailComplete: {
			code: string;
		};
		AuthState: {
			/** @description registered webauthn authenticators */
			authenticators: components["schemas"]["WebauthnAuthenticator"][];
			/** @description if there is at least one verified and primary email address
			 *
			 *     (this is used for magic links and password resets) */
			has_email: boolean;
			/** @description if a password has been set */
			has_password: boolean;
			/** @description if local totp state is_valid */
			has_totp: boolean;
			/** @description the oauth providers this user has authenticated with */
			oauth_providers: string[];
		};
		/** @description openid connect automatic configuration */
		Autoconfig: {
			/** Format: uri */
			authorization_endpoint: string;
			grant_types_supported: string[];
			/** Format: uri */
			issuer: string;
			response_types_supported: string[];
			scopes_supported: string[];
			subject_types_supported: string[];
			/** Format: uri */
			token_endpoint: string;
			token_endpoint_auth_methods_supported: string[];
			/** Format: uri */
			userinfo_endpoint: string;
		};
		AutomodAction: {
			/** @enum {string} */
			type: "Block";
		} | {
			/**
			 * Format: int64
			 * @description in milliseconds
			 */
			duration: number;
			/** @enum {string} */
			type: "Timeout";
		} | {
			/** @enum {string} */
			type: "Remove";
		} | {
			thread_id: components["schemas"]["Id"];
			/** @enum {string} */
			type: "SendAlert";
		} | {
			reaction: components["schemas"]["ReactionKey"];
			/** @enum {string} */
			type: "React";
		};
		AutomodRule: {
			actions: components["schemas"]["AutomodAction"][];
			enabled: boolean;
			except_roles: components["schemas"]["Id"][];
			except_threads: components["schemas"]["Id"][];
			id: components["schemas"]["Id"];
			name: string;
			room_id: components["schemas"]["Id"];
			trigger: components["schemas"]["AutomodTrigger"];
		};
		AutomodRuleCreate: {
			actions: components["schemas"]["AutomodAction"][];
			except_roles?: components["schemas"]["Id"][];
			except_threads?: components["schemas"]["Id"][];
			name: string;
			trigger: components["schemas"]["AutomodTrigger"];
		};
		AutomodRuleUpdate: {
			actions?: components["schemas"]["AutomodAction"][] | null;
			enabled?: boolean | null;
			except_roles?: components["schemas"]["Id"][] | null;
			except_threads?: components["schemas"]["Id"][] | null;
			name?: string | null;
			trigger?: null | components["schemas"]["AutomodTrigger"];
		};
		AutomodTrigger: {
			allow: string[];
			deny: string[];
			/** @enum {string} */
			type: "MessageRegex";
		} | {
			/** @enum {string} */
			type: "MessageKeywords";
			words: string[];
		};
		/** @description a special type of bot designed to represent a user on another platform */
		Bot: {
			/** @description who can use the bot */
			access: components["schemas"]["BotAccess"];
			/** @description enables managing Puppet users */
			is_bridge: boolean;
			/** @description who has control over this bot */
			owner_id: components["schemas"]["Id"];
		};
		BotAccess: "Private" | {
			/** @description anyone can use the bot */
			Public: {
				/** @description anyone can search for and find this; otherwise, this is unlisted */
				is_discoverable: boolean;
			};
		};
		CalendarEvent: {
			creator_id: components["schemas"]["Id"];
			description?: string | null;
			end: components["schemas"]["Time"];
			id: components["schemas"]["Id"];
			location?: string | null;
			recurrence: components["schemas"]["Recurrence"][];
			start: components["schemas"]["Time"];
			thread_id: components["schemas"]["Id"];
			timezone?: string | null;
			title: string;
			/** Format: uri */
			url?: string | null;
		};
		CalendarEventCreate: {
			description?: string | null;
			end: components["schemas"]["Time"];
			location?: string | null;
			recurrence: components["schemas"]["Recurrence"][];
			start: components["schemas"]["Time"];
			timezone?: string | null;
			title: string;
			/** Format: uri */
			url?: string | null;
		};
		CalendarEventPatch: {
			description?: string | null;
			location?: string | null;
			thread_id?: null | components["schemas"]["Id"];
			title?: string | null;
			/** Format: uri */
			url?: string | null;
		};
		CaptchaChallenge: {
			code: string;
		};
		CaptchaResponse: {
			code: string;
		};
		/** @description A channel */
		Channel: {
			archived_at?: null | components["schemas"]["Time"];
			/**
			 * Format: int64
			 * @description bitrate, for voice channels. defaults to 65535 (64Kibps).
			 */
			bitrate?: number | null;
			creator_id: components["schemas"]["Id"];
			deleted_at?: null | components["schemas"]["Time"];
			description?: string | null;
			icon?: null | components["schemas"]["Id"];
			id: components["schemas"]["Id"];
			is_unread?: boolean | null;
			last_read_id?: null | components["schemas"]["Id"];
			last_version_id?: null | components["schemas"]["Id"];
			/** @description a locked channel can only be interacted with (sending messages,
			 *     (un)archiving, etc) by people with the `ThreadLock` permission */
			locked: boolean;
			/**
			 * Format: int64
			 * @description number of people in this room
			 */
			member_count: number;
			/** Format: int64 */
			mention_count?: number | null;
			/** Format: int64 */
			message_count?: number | null;
			name: string;
			/** @description not safe for work */
			nsfw: boolean;
			/**
			 * Format: int64
			 * @description number of people who are online in this room
			 */
			online_count: number;
			owner_id?: null | components["schemas"]["Id"];
			parent_id?: null | components["schemas"]["Id"];
			/** @description permission overwrites for this channel */
			permission_overwrites: components["schemas"]["PermissionOverwrite"][];
			/**
			 * Format: int32
			 * @description the position of this channel in the navbar
			 *
			 *     - lower numbers come first (0 is the first channel)
			 *     - channels with the same position are tiebroken by id
			 *     - channels without a position come last, ordered by newest first
			 */
			position?: number | null;
			/** @description for dm and gdm channels, this is who the dm is with */
			recipients: components["schemas"]["User"][];
			room_id?: null | components["schemas"]["Id"];
			/** Format: int64 */
			root_message_count?: number | null;
			/** @description tags that are applied to this thread */
			tags: components["schemas"]["Id"][];
			/** @description type specific data for this channel */
			type: components["schemas"]["ChannelType"];
			user_config?: null | components["schemas"]["UserConfigChannel"];
			/**
			 * Format: int64
			 * @description maximum number of users who can be in this voice channel
			 */
			user_limit?: number | null;
			/** @description only updates when the channel itself is updated, not the stuff in the channel */
			version_id: components["schemas"]["Id"];
		};
		ChannelCreate: {
			/** Format: int64 */
			bitrate?: number | null;
			description?: string | null;
			icon?: null | components["schemas"]["Id"];
			name: string;
			/** @description not safe for work */
			nsfw?: boolean;
			parent_id?: null | components["schemas"]["Id"];
			/** @description the recipient(s) for this dm/gdm */
			recipients?: components["schemas"]["Id"][] | null;
			/** @description tags to apply to this thread (overwrite, not append) */
			tags?: components["schemas"]["Id"][] | null;
			/** @description The type of this channel */
			type?: components["schemas"]["ChannelType"];
			/** Format: int64 */
			user_limit?: number | null;
		};
		ChannelPatch: {
			/** Format: int64 */
			bitrate?: number | null;
			description?: string | null;
			icon?: null | components["schemas"]["Id"];
			name?: string | null;
			/** @description not safe for work */
			nsfw?: boolean | null;
			owner_id?: null | components["schemas"]["Id"];
			/** @description tags to apply to this thread (overwrite, not append) */
			tags?: components["schemas"]["Id"][] | null;
			/** Format: int64 */
			user_limit?: number | null;
		};
		/** @description reorder some channels */
		ChannelReorder: {
			/** @description the channels to reorder */
			channels?: components["schemas"]["ChannelReorderItem"][];
		};
		ChannelReorderItem: {
			id: components["schemas"]["Id"];
			parent_id?: null | components["schemas"]["Id"];
			/** Format: int32 */
			position?: number | null;
		};
		/** @enum {string} */
		ChannelType:
			| "Text"
			| "ThreadPublic"
			| "ThreadPrivate"
			| "Dm"
			| "Gdm"
			| "Forum"
			| "Voice"
			| "Category"
			| "Calendar";
		/** @description a color */
		Color: string;
		/** @description an application that is authorized to a user */
		Connection: {
			application: components["schemas"]["Application"];
			created_at: components["schemas"]["Time"];
			scopes: components["schemas"]["Scope"][];
		};
		ContextResponse: {
			has_after: boolean;
			has_before: boolean;
			items: components["schemas"]["Message"][];
			/** Format: int64 */
			total: number;
		};
		Cron: string;
		/**
		 * Format: email
		 * @description an email address
		 */
		EmailAddr: string;
		EmailInfo: {
			/** @description the email address itself */
			email: components["schemas"]["EmailAddr"];
			/** @description whether this is the user's primary email address */
			is_primary: boolean;
			/** @description user verified they have access to the email address */
			is_verified: boolean;
		};
		EmailInfoPatch: {
			/** @description whether this is the user's primary email address
			 *
			 *     - there can only be one primary email address
			 *     - the primary address has EmailTrust::Full */
			is_primary?: boolean | null;
		};
		Embed: {
			author_avatar?: null | components["schemas"]["Media"];
			author_name?: string | null;
			/** Format: uri */
			author_url?: string | null;
			/**
			 * Format: uri
			 * @description the final resolved url, after redirects and canonicalization. If None, its the same as `url`.
			 */
			canonical_url?: string | null;
			color?: null | components["schemas"]["Color"];
			description?: string | null;
			id: components["schemas"]["Id"];
			media?: null | components["schemas"]["Media"];
			site_avatar?: null | components["schemas"]["Media"];
			/** @description the name of the website */
			site_name?: string | null;
			thumbnail?: null | components["schemas"]["Media"];
			title?: string | null;
			/** @description what kind of thing this is */
			type?: components["schemas"]["EmbedType"];
			/**
			 * Format: uri
			 * @description the url this embed was requested for
			 */
			url?: string | null;
		};
		EmbedCreate: {
			author_avatar?: null | components["schemas"]["MediaRef"];
			author_name?: string | null;
			/** Format: uri */
			author_url?: string | null;
			/** @description the theme color of the site, as a hex string (`#rrggbb`) */
			color?: string | null;
			description?: string | null;
			media?: null | components["schemas"]["MediaRef"];
			thumbnail?: null | components["schemas"]["MediaRef"];
			title?: string | null;
			/**
			 * Format: uri
			 * @description the url this embed was requested for
			 */
			url?: string | null;
		};
		EmbedRequest: {
			/** Format: uri */
			url: string;
		};
		/** @enum {string} */
		EmbedType: "Media" | "Link" | "Custom";
		Emoji:
			| components["schemas"]["EmojiCustom"]
			| components["schemas"]["EmojiUnicode"];
		EmojiCustom: {
			animated: boolean;
			creator_id: components["schemas"]["Id"];
			id: components["schemas"]["Id"];
			media_id: components["schemas"]["Id"];
			name: string;
			owner: components["schemas"]["EmojiOwner"];
		};
		EmojiCustomCreate: {
			animated: boolean;
			media_id: components["schemas"]["Id"];
			name: string;
		};
		EmojiCustomPatch: {
			name?: string | null;
		};
		EmojiOwner: {
			/** @enum {string} */
			owner: "Room";
			room_id: components["schemas"]["Id"];
		} | {
			/** @enum {string} */
			owner: "User";
		};
		/** @description a single unicode emoji */
		EmojiUnicode: string;
		ExternalPlatform: null | string;
		/** @description webrtc ice candidate */
		IceCandidate: string;
		/**
		 * Uuid
		 * Format: uuid
		 * @description A universally unique identifier.
		 */
		Id: string;
		/** @description how a user is ignoring another user */
		Ignore: {
			/** @enum {string} */
			ignore: "Until";
			ignore_until: components["schemas"]["Time"];
		} | {
			/** @enum {string} */
			ignore: "Forever";
		};
		/** @description metadata for images */
		Image: {
			/** Format: int64 */
			height: number;
			language?: null | components["schemas"]["Language"];
			/** Format: int64 */
			width: number;
		};
		/** @enum {string} */
		InboxChannelsOrder: "activity" | "inactivity" | "newest" | "oldest";
		/** @description an application that is authorized to a room */
		Integration: {
			application: components["schemas"]["Application"];
			bot: components["schemas"]["User"];
			member: components["schemas"]["RoomMember"];
		};
		Invite: {
			/** @description the invite code for this invite */
			code: components["schemas"]["InviteCode"];
			/** @description the time when this invite was created */
			created_at: components["schemas"]["Time"];
			/** @description the user who created this invite */
			creator: components["schemas"]["User"];
			/** @description the id of the user who created this invite */
			creator_id: components["schemas"]["Id"];
			/** @description a description for this invite */
			description?: string | null;
			expires_at?: null | components["schemas"]["Time"];
			/** @description if this invite's code is custom (instead of random) */
			is_vanity: boolean;
			/** @description where this invite leads */
			target: components["schemas"]["InviteTarget"];
		};
		/** @description a short, unique identifier. knowing the code grants access to the invite's target. */
		InviteCode: string;
		InviteCreate: {
			/** @description a description for this invite */
			description?: string | null;
			expires_at?: null | components["schemas"]["Time"];
			/**
			 * Format: int32
			 * @description the maximum number of times this invite can be used
			 *     be sure to account for existing `uses` and `max_uses` when patching
			 */
			max_uses?: number | null;
		};
		InvitePatch: {
			/** @description a description for this invite */
			description?: string | null;
			expires_at?: null | components["schemas"]["Time"];
			/**
			 * Format: int32
			 * @description the maximum number of times this invite can be used
			 *     be sure to account for existing `uses` and `max_uses` when patching
			 */
			max_uses?: number | null;
		};
		/** @description where this invite leads */
		InviteTarget: {
			room: components["schemas"]["Room"];
			thread?: null | components["schemas"]["Channel"];
			/** @enum {string} */
			type: "Room";
		} | {
			thread: components["schemas"]["Channel"];
			/** @enum {string} */
			type: "Gdm";
		} | {
			/** @enum {string} */
			type: "Server";
		} | {
			/** @enum {string} */
			type: "User";
			user: components["schemas"]["User"];
		};
		/** @description the type and id of this invite's target */
		InviteTargetId: {
			room_id: components["schemas"]["Id"];
			thread_id?: null | components["schemas"]["Id"];
			/** @enum {string} */
			type: "Room";
		} | {
			thread_id: components["schemas"]["Id"];
			/** @enum {string} */
			type: "Gdm";
		} | {
			/** @enum {string} */
			type: "Server";
		} | {
			/** @enum {string} */
			type: "User";
			user_id: components["schemas"]["Id"];
		};
		InviteWithMetadata: components["schemas"]["Invite"] & {
			/**
			 * Format: int32
			 * @description the maximum number of times this invite can be used
			 */
			max_uses?: number | null;
			/**
			 * Format: int64
			 * @description the number of time this invite has been used
			 */
			uses: number;
		};
		/** @description a language */
		Language: string;
		/** @description A distinct logical item of media. */
		Media: {
			/** @description Descriptive alt text, not entirely unlike a caption */
			alt?: string | null;
			/** @description The original filename */
			filename: string;
			id: components["schemas"]["Id"];
			/** @description The source (Uploaded, Downloaded) */
			source: components["schemas"]["MediaTrack"];
		};
		MediaCreate: components["schemas"]["MediaCreateSource"] & {
			/** @description Descriptive alt text, not entirely unlike a caption */
			alt?: string | null;
		};
		MediaCreateSource: {
			/** @description The original filename */
			filename?: string;
			/**
			 * Format: int64
			 * @description The size (in bytes)
			 */
			size: number;
		} | {
			/** @description The original filename */
			filename?: string | null;
			/**
			 * Format: int64
			 * @description The size (in bytes)
			 */
			size?: number | null;
			/**
			 * Format: uri
			 * @description A url to download this media from
			 */
			source_url: string;
		};
		MediaCreated: {
			media_id: components["schemas"]["Id"];
			/**
			 * Format: uri
			 * @description A url to download your media to
			 */
			upload_url?: string | null;
		};
		/**
		 * @description the kind of media this track is for
		 * @enum {string}
		 */
		MediaKind: "Video" | "Audio";
		MediaPatch: {
			/** @description Descriptive alt text, not entirely unlike a caption */
			alt?: string | null;
		};
		MediaRef: {
			id: components["schemas"]["Id"];
		};
		/** @description A unique "view" of this piece of media. Could be the source, an
		 *     audio/video track, a thumbnail, other metadata, etc. */
		MediaTrack:
			& components["schemas"]["MediaTrackInfo"]
			& components["schemas"]["TrackSource"]
			& {
				/** @description the mime type of this view */
				mime: components["schemas"]["Mime"];
				/**
				 * Format: int64
				 * @description The blob's length in bytes
				 */
				size: number;
			};
		/** @description metadata about a particular track */
		MediaTrackInfo:
			| (components["schemas"]["Video"] & {
				/** @enum {string} */
				type: "Video";
			})
			| (components["schemas"]["Audio"] & {
				/** @enum {string} */
				type: "Audio";
			})
			| (components["schemas"]["Image"] & {
				/** @enum {string} */
				type: "Image";
			})
			| (components["schemas"]["Image"] & {
				/** @enum {string} */
				type: "Thumbnail";
			})
			| (components["schemas"]["TimedText"] & {
				/** @enum {string} */
				type: "TimedText";
			})
			| (components["schemas"]["Text"] & {
				/** @enum {string} */
				type: "Text";
			})
			| (components["schemas"]["Mixed"] & {
				/** @enum {string} */
				type: "Mixed";
			})
			| {
				/** @enum {string} */
				type: "Other";
			};
		MemberListGroup: {
			/** Format: int64 */
			count: number;
			id: components["schemas"]["MemberListGroupId"];
		};
		MemberListGroupId: "Online" | "Offline" | {
			/** @description hoisted roles */
			Role: components["schemas"]["Id"];
		};
		MemberListOp: {
			/**
			 * Format: int64
			 * @description the start of the range
			 */
			position: number;
			/** @description only returned if channel is in a room */
			room_members?: components["schemas"]["RoomMember"][] | null;
			/** @description only returned if listing members in a thread */
			thread_members?: components["schemas"]["ThreadMember"][] | null;
			/** @enum {string} */
			type: "Sync";
			users: components["schemas"]["User"][];
		} | {
			/** Format: int64 */
			position: number;
			room_member?: null | components["schemas"]["RoomMember"];
			thread_member?: null | components["schemas"]["ThreadMember"];
			/** @enum {string} */
			type: "Insert";
			user: components["schemas"]["User"];
		} | {
			/** Format: int64 */
			count: number;
			/** Format: int64 */
			position: number;
			/** @enum {string} */
			type: "Delete";
		};
		/** @description who/what this message notified on send */
		Mentions: {
			everyone?: boolean;
			roles: components["schemas"]["Id"][];
			threads: components["schemas"]["Id"][];
			users: components["schemas"]["Id"][];
		};
		Message: components["schemas"]["MessageType"] & {
			/** @description the id of who sent this message */
			author_id: components["schemas"]["Id"];
			channel_id: components["schemas"]["Id"];
			created_at?: null | components["schemas"]["Time"];
			deleted_at?: null | components["schemas"]["Time"];
			edited_at?: null | components["schemas"]["Time"];
			id: components["schemas"]["Id"];
			mentions: components["schemas"]["Mentions"];
			/** @description unique string sent by the client via idempotency-key to identify this message */
			nonce?: string | null;
			pinned?: null | components["schemas"]["Pinned"];
			reactions?: components["schemas"]["ReactionCounts"];
			removed_at?: null | components["schemas"]["Time"];
			version_id: components["schemas"]["Id"];
		};
		MessageCall: {
			ended_at?: null | components["schemas"]["Time"];
			/** @description the people who joined the call */
			participants: components["schemas"]["Id"][];
		};
		MessageCreate: {
			attachments?: components["schemas"]["MediaRef"][];
			/** @description the message's content, in either markdown or the new format depending on if use_new_text_formatting is true */
			content?: string | null;
			created_at?: null | components["schemas"]["Time"];
			embeds?: components["schemas"]["EmbedCreate"][];
			mentions?: components["schemas"]["Mentions"];
			/**
			 * @deprecated
			 * @description arbitrary metadata associated with a message
			 *
			 *     deprecated: arbitrary metadata is too dubious, sorry. will come up with a better solution later
			 */
			metadata?: unknown;
			/**
			 * @deprecated
			 * @description override the name of this message's sender
			 *
			 *     deprecated: create new puppets for each bridged user instead
			 */
			override_name?: string | null;
			reply_id?: null | components["schemas"]["Id"];
		};
		/** @description a basic message, written using markdown
		 *
		 *     NOTE: new message features won't be backported here! */
		MessageDefaultMarkdown: {
			attachments: components["schemas"]["Media"][];
			/** @description the message's content in markdown */
			content?: string | null;
			embeds: components["schemas"]["Embed"][];
			/**
			 * @deprecated
			 * @description arbitrary metadata associated with a message
			 *
			 *     deprecated: arbitrary metadata is too dubious, sorry. will come up with a better solution later
			 */
			metadata?: unknown;
			/**
			 * @deprecated
			 * @description override the name of this message's sender
			 *
			 *     deprecated: create new puppets for each bridged user instead
			 */
			override_name?: string | null;
			reply_id?: null | components["schemas"]["Id"];
		};
		/** @description Information about a member being added or removed from a thread */
		MessageMember: {
			target_user_id: components["schemas"]["Id"];
		};
		MessageMigrate: {
			/** @description which messages to move */
			message_ids?: components["schemas"]["Id"][];
			/** @description must be in same room (for now...) */
			target_id: components["schemas"]["Id"];
		};
		MessageModerate: {
			/** @description which messages to delete */
			delete?: components["schemas"]["Id"][];
			/** @description which messages to remove */
			remove?: components["schemas"]["Id"][];
			/** @description which messages to restore */
			restore?: components["schemas"]["Id"][];
		};
		MessagePatch: {
			attachments?: components["schemas"]["MediaRef"][] | null;
			/** @description the new message content. whether its markdown/new format depends on the target message's format */
			content?: string | null;
			edited_at?: null | components["schemas"]["Time"];
			embeds?: components["schemas"]["EmbedCreate"][] | null;
			/**
			 * @deprecated
			 * @description arbitrary metadata associated with a message
			 *
			 *     deprecated: arbitrary metadata is too dubious, sorry. will come up with a better solution later
			 */
			metadata?: unknown;
			/**
			 * @deprecated
			 * @description override the name of this message's sender
			 *
			 *     deprecated: create new puppets for each bridged user instead
			 */
			override_name?: string | null;
			reply_id?: null | components["schemas"]["Id"];
		};
		/** @description Information about a message being pinned */
		MessagePin: {
			pinned_message_id: components["schemas"]["Id"];
		};
		MessageSync:
			| {
				room: components["schemas"]["Room"];
				/** @enum {string} */
				type: "RoomCreate";
			}
			| {
				room: components["schemas"]["Room"];
				/** @enum {string} */
				type: "RoomUpdate";
			}
			| {
				room_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "RoomDelete";
			}
			| {
				channel: components["schemas"]["Channel"];
				/** @enum {string} */
				type: "ChannelCreate";
			}
			| {
				channel: components["schemas"]["Channel"];
				/** @enum {string} */
				type: "ChannelUpdate";
			}
			| {
				channel_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "ChannelTyping";
				until: components["schemas"]["Time"];
				user_id: components["schemas"]["Id"];
			}
			| {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "ChannelAck";
				user_id: components["schemas"]["Id"];
				version_id: components["schemas"]["Id"];
			}
			| {
				message: components["schemas"]["Message"];
				/** @enum {string} */
				type: "MessageCreate";
			}
			| {
				message: components["schemas"]["Message"];
				/** @enum {string} */
				type: "MessageUpdate";
			}
			| {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "MessageDelete";
			}
			| {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "MessageVersionDelete";
				version_id: components["schemas"]["Id"];
			}
			| {
				channel_id: components["schemas"]["Id"];
				message_ids: components["schemas"]["Id"][];
				/** @enum {string} */
				type: "MessageDeleteBulk";
			}
			| {
				channel_id: components["schemas"]["Id"];
				message_ids: components["schemas"]["Id"][];
				/** @enum {string} */
				type: "MessageRemove";
			}
			| {
				channel_id: components["schemas"]["Id"];
				message_ids: components["schemas"]["Id"][];
				/** @enum {string} */
				type: "MessageRestore";
			}
			| {
				member: components["schemas"]["RoomMember"];
				/** @enum {string} */
				type: "RoomMemberUpsert";
			}
			| {
				member: components["schemas"]["ThreadMember"];
				/** @enum {string} */
				type: "ThreadMemberUpsert";
			}
			| {
				role: components["schemas"]["Role"];
				/** @enum {string} */
				type: "RoleCreate";
			}
			| {
				role: components["schemas"]["Role"];
				/** @enum {string} */
				type: "RoleUpdate";
			}
			| {
				role_id: components["schemas"]["Id"];
				room_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "RoleDelete";
			}
			| {
				roles: components["schemas"]["RoleReorderItem"][];
				room_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "RoleReorder";
			}
			| {
				invite: components["schemas"]["InviteWithMetadata"];
				/** @enum {string} */
				type: "InviteCreate";
			}
			| {
				invite: components["schemas"]["InviteWithMetadata"];
				/** @enum {string} */
				type: "InviteUpdate";
			}
			| {
				code: components["schemas"]["InviteCode"];
				target: components["schemas"]["InviteTargetId"];
				/** @enum {string} */
				type: "InviteDelete";
			}
			| {
				channel_id: components["schemas"]["Id"];
				key: components["schemas"]["ReactionKey"];
				message_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "ReactionCreate";
				user_id: components["schemas"]["Id"];
			}
			| {
				channel_id: components["schemas"]["Id"];
				key: components["schemas"]["ReactionKey"];
				message_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "ReactionDelete";
				user_id: components["schemas"]["Id"];
			}
			| {
				channel_id: components["schemas"]["Id"];
				message_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "ReactionPurge";
			}
			| {
				emoji: components["schemas"]["EmojiCustom"];
				/** @enum {string} */
				type: "EmojiCreate";
			}
			| {
				emoji: components["schemas"]["EmojiCustom"];
				/** @enum {string} */
				type: "EmojiUpdate";
			}
			| {
				emoji_id: components["schemas"]["Id"];
				room_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "EmojiDelete";
			}
			| {
				payload: components["schemas"]["SignallingMessage"];
				/** @enum {string} */
				type: "VoiceDispatch";
				/** @description who to send this dispatch to */
				user_id: components["schemas"]["Id"];
			}
			| {
				state?: null | components["schemas"]["VoiceState"];
				/** @enum {string} */
				type: "VoiceState";
				user_id: components["schemas"]["Id"];
			}
			| {
				/** @enum {string} */
				type: "UserCreate";
				user: components["schemas"]["User"];
			}
			| {
				/** @enum {string} */
				type: "UserUpdate";
				user: components["schemas"]["User"];
			}
			| {
				config: components["schemas"]["UserConfigGlobal"];
				/** @enum {string} */
				type: "UserConfigGlobal";
				user_id: components["schemas"]["Id"];
			}
			| {
				config: components["schemas"]["UserConfigRoom"];
				room_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "UserConfigRoom";
				user_id: components["schemas"]["Id"];
			}
			| {
				channel_id: components["schemas"]["Id"];
				config: components["schemas"]["UserConfigChannel"];
				/** @enum {string} */
				type: "UserConfigChannel";
				user_id: components["schemas"]["Id"];
			}
			| {
				config: components["schemas"]["UserConfigUser"];
				target_user_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "UserConfigUser";
				user_id: components["schemas"]["Id"];
			}
			| {
				id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "UserDelete";
			}
			| {
				session: components["schemas"]["Session"];
				/** @enum {string} */
				type: "SessionCreate";
			}
			| {
				session: components["schemas"]["Session"];
				/** @enum {string} */
				type: "SessionUpdate";
			}
			| {
				id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "SessionDelete";
				user_id?: null | components["schemas"]["Id"];
			}
			| {
				relationship: components["schemas"]["Relationship"];
				target_user_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "RelationshipUpsert";
				user_id: components["schemas"]["Id"];
			}
			| {
				target_user_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "RelationshipDelete";
				user_id: components["schemas"]["Id"];
			}
			| {
				connection: components["schemas"]["Connection"];
				/** @enum {string} */
				type: "ConnectionCreate";
				user_id: components["schemas"]["Id"];
			}
			| {
				app_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "ConnectionDelete";
				user_id: components["schemas"]["Id"];
			}
			| {
				entry: components["schemas"]["AuditLogEntry"];
				/** @enum {string} */
				type: "AuditLogEntryCreate";
			}
			| {
				ban: components["schemas"]["RoomBan"];
				room_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "BanCreate";
			}
			| {
				room_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "BanDelete";
				user_id: components["schemas"]["Id"];
			}
			| {
				channel_id?: null | components["schemas"]["Id"];
				groups: components["schemas"]["MemberListGroup"][];
				ops: components["schemas"]["MemberListOp"][];
				room_id?: null | components["schemas"]["Id"];
				/** @enum {string} */
				type: "MemberListSync";
				/** @description which user this list sync is for */
				user_id: components["schemas"]["Id"];
			}
			| {
				notification: components["schemas"]["Notification"];
				/** @enum {string} */
				type: "InboxNotificationCreate";
				user_id: components["schemas"]["Id"];
			}
			| (components["schemas"]["NotificationMarkRead"] & {
				user_id: components["schemas"]["Id"];
			} & {
				/** @enum {string} */
				type: "InboxMarkRead";
			})
			| (components["schemas"]["NotificationMarkRead"] & {
				user_id: components["schemas"]["Id"];
			} & {
				/** @enum {string} */
				type: "InboxMarkUnread";
			})
			| (components["schemas"]["NotificationFlush"] & {
				user_id: components["schemas"]["Id"];
			} & {
				/** @enum {string} */
				type: "InboxFlush";
			})
			| {
				event: components["schemas"]["CalendarEvent"];
				/** @enum {string} */
				type: "CalendarEventCreate";
			}
			| {
				event: components["schemas"]["CalendarEvent"];
				/** @enum {string} */
				type: "CalendarEventUpdate";
			}
			| {
				channel_id: components["schemas"]["Id"];
				event_id: components["schemas"]["Id"];
				/** @enum {string} */
				type: "CalendarEventDelete";
			};
		/** @description Information about the pingback */
		MessageThreadPingback: {
			source_channel_id: components["schemas"]["Id"];
			source_room_id: components["schemas"]["Id"];
			source_user_id: components["schemas"]["Id"];
		};
		/** @description Information about a thread being renamed */
		MessageThreadRename: {
			name_new: string;
			name_old: string;
		};
		MessageType:
			| (components["schemas"]["MessageDefaultMarkdown"] & {
				/** @enum {string} */
				type: "DefaultMarkdown";
			})
			| (components["schemas"]["MessagePin"] & {
				/** @enum {string} */
				type: "MessagePinned";
			})
			| (components["schemas"]["MessageMember"] & {
				/** @enum {string} */
				type: "MemberAdd";
			})
			| (components["schemas"]["MessageMember"] & {
				/** @enum {string} */
				type: "MemberRemove";
			})
			| {
				/** @enum {string} */
				type: "MemberJoin";
			}
			| (components["schemas"]["MessageCall"] & {
				/** @enum {string} */
				type: "Call";
			})
			| (components["schemas"]["MessageThreadRename"] & {
				/** @enum {string} */
				type: "ThreadRename";
			})
			| (components["schemas"]["MessageThreadPingback"] & {
				/** @enum {string} */
				type: "ThreadPingback";
			});
		/**
		 * Mime
		 * @description a mime/media type
		 * @example application/json
		 */
		Mime: string;
		/** @description multiple pieces of metadata mixed together */
		Mixed: {
			/** Format: int64 */
			duration?: number | null;
			/** Format: int64 */
			height?: number | null;
			language?: null | components["schemas"]["Language"];
			/** Format: int64 */
			width?: number | null;
		};
		/** @description how long to mute for */
		Mute: {
			expires_at?: null | components["schemas"]["Time"];
		};
		/**
		 * @description how to handle an event
		 * @enum {string}
		 */
		NotifAction: "Notify" | "Watching" | "Ignore";
		/** @description a notification; a unit of stuff that may show up in your inbox or be pushed to you */
		Notification: {
			/** @description when this was added to the inbox */
			added_at: components["schemas"]["Time"];
			/** @description the channel this message was sent in */
			channel_id: components["schemas"]["Id"];
			id: components["schemas"]["Id"];
			/** @description the id of the message that was sent */
			message_id: components["schemas"]["Id"];
			read_at?: null | components["schemas"]["Time"];
			/** @description why this was created */
			reason: components["schemas"]["NotificationReason"];
		};
		NotificationCreate: {
			added_at?: null | components["schemas"]["Time"];
			/** @description the channel this message was sent in */
			channel_id: components["schemas"]["Id"];
			/** @description the id of the message that was sent */
			message_id: components["schemas"]["Id"];
		};
		NotificationFlush: {
			after?: null | components["schemas"]["Id"];
			before?: null | components["schemas"]["Id"];
			/** @description restrict to just these channels */
			channel_ids?: components["schemas"]["Id"][] | null;
			/** @description also include unread notifications */
			include_unread?: boolean;
			/** @description restrict to just these messages */
			message_ids?: components["schemas"]["Id"][] | null;
			/** @description restrict to just these rooms */
			room_ids?: components["schemas"]["Id"][] | null;
		};
		NotificationMarkRead: {
			/** @description mark everything in these threads as read */
			channel_ids?: components["schemas"]["Id"][];
			/** @description mark everything as read */
			everything?: boolean;
			/** @description mark these messages as read */
			message_ids?: components["schemas"]["Id"][];
			/** @description mark everything in these rooms as read */
			room_ids?: components["schemas"]["Id"][];
		};
		NotificationPagination:
			& components["schemas"]["PaginationResponse_Notification"]
			& {
				channels: components["schemas"]["Channel"][];
				messages: components["schemas"]["Message"][];
				rooms: components["schemas"]["Room"][];
			};
		/**
		 * @description what caused this notification to be created
		 * @enum {string}
		 */
		NotificationReason: "Reminder" | "Mention" | "MentionBulk" | "Reply";
		/** @description notification config for a channel */
		NotifsChannel: {
			mentions?: null | components["schemas"]["NotifAction"];
			messages?: null | components["schemas"]["NotifAction"];
			mute?: null | components["schemas"]["Mute"];
			threads?: null | components["schemas"]["NotifAction"];
		};
		/** @description notification config for a user (works globally) */
		NotifsGlobal: {
			mentions: components["schemas"]["NotifAction"];
			messages: components["schemas"]["NotifAction"];
			mute?: null | components["schemas"]["Mute"];
			room_dm: components["schemas"]["NotifAction"];
			room_private: components["schemas"]["NotifAction"];
			room_public: components["schemas"]["NotifAction"];
			threads: components["schemas"]["NotifAction"];
		};
		/** @description notification config for a room */
		NotifsRoom: {
			mentions?: null | components["schemas"]["NotifAction"];
			messages?: null | components["schemas"]["NotifAction"];
			mute?: null | components["schemas"]["Mute"];
			threads?: null | components["schemas"]["NotifAction"];
		};
		OauthAuthorizeInfo: {
			application: components["schemas"]["Application"];
			auth_user: components["schemas"]["User"];
			authorized: boolean;
			bot_user: components["schemas"]["User"];
		};
		OauthAuthorizeResponse: {
			/** Format: uri */
			redirect_uri: string;
		};
		OauthInitResponse: {
			/** Format: uri */
			url: string;
		};
		OauthIntrospectResponse: {
			active: boolean;
			client_id: components["schemas"]["Id"];
			/** Format: int64 */
			exp?: number | null;
			scopes: components["schemas"]["Scope"][];
			/** @description this is specified to be "human readable", but in practice it would be
			 *     simpler and more useful to return the unique id of the user */
			username: components["schemas"]["Id"];
		};
		OauthTokenRequest: {
			client_id?: null | components["schemas"]["Id"];
			client_secret?: string | null;
			code?: string | null;
			code_verifier?: string | null;
			grant_type: string;
			/** Format: uri */
			redirect_uri?: string | null;
			refresh_token?: string | null;
		};
		OauthTokenResponse: {
			access_token: string;
			/** Format: int64 */
			expires_in: number;
			refresh_token?: string | null;
			scope: string;
			token_type: string;
		};
		/** @enum {string} */
		PaginationDirection: "f" | "b";
		PaginationQuery_Id: {
			dir?: null | components["schemas"]["PaginationDirection"];
			/**
			 * Uuid
			 * Format: uuid
			 * @description A universally unique identifier.
			 */
			from?: string;
			/**
			 * Format: int32
			 * @description The maximum number of items to return.
			 */
			limit?: number | null;
			/**
			 * Uuid
			 * Format: uuid
			 * @description A universally unique identifier.
			 */
			to?: string;
		};
		PaginationResponse_Application: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				/** @description enables managing Puppet users */
				bridge: boolean;
				description?: string | null;
				id: components["schemas"]["Id"];
				name: string;
				/** @description oauth whether this client can keep secrets confidential */
				oauth_confidential: boolean;
				oauth_redirect_uris?: string[];
				/** @description only returned on oauth token rotate endpoint */
				oauth_secret?: string | null;
				owner_id: components["schemas"]["Id"];
				/** @description if anyone can use this */
				public: boolean;
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_AuditLogEntry: {
			cursor?: string | null;
			has_more: boolean;
			items: (components["schemas"]["AuditLogEntryType"] & {
				/** @description Unique id idenfitying this entry */
				id: components["schemas"]["Id"];
				/** @description User supplied reason why this happened */
				reason?: string | null;
				/** @description Room this happened in. Is user_id for user audit logs. */
				room_id: components["schemas"]["Id"];
				session_id?: null | components["schemas"]["Id"];
				/** @description User who caused this entry to be created */
				user_id: components["schemas"]["Id"];
			})[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_AutomodRule: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				actions: components["schemas"]["AutomodAction"][];
				enabled: boolean;
				except_roles: components["schemas"]["Id"][];
				except_threads: components["schemas"]["Id"][];
				id: components["schemas"]["Id"];
				name: string;
				room_id: components["schemas"]["Id"];
				trigger: components["schemas"]["AutomodTrigger"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Channel: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				archived_at?: null | components["schemas"]["Time"];
				/**
				 * Format: int64
				 * @description bitrate, for voice channels. defaults to 65535 (64Kibps).
				 */
				bitrate?: number | null;
				creator_id: components["schemas"]["Id"];
				deleted_at?: null | components["schemas"]["Time"];
				description?: string | null;
				icon?: null | components["schemas"]["Id"];
				id: components["schemas"]["Id"];
				is_unread?: boolean | null;
				last_read_id?: null | components["schemas"]["Id"];
				last_version_id?: null | components["schemas"]["Id"];
				/** @description a locked channel can only be interacted with (sending messages,
				 *     (un)archiving, etc) by people with the `ThreadLock` permission */
				locked: boolean;
				/**
				 * Format: int64
				 * @description number of people in this room
				 */
				member_count: number;
				/** Format: int64 */
				mention_count?: number | null;
				/** Format: int64 */
				message_count?: number | null;
				name: string;
				/** @description not safe for work */
				nsfw: boolean;
				/**
				 * Format: int64
				 * @description number of people who are online in this room
				 */
				online_count: number;
				owner_id?: null | components["schemas"]["Id"];
				parent_id?: null | components["schemas"]["Id"];
				/** @description permission overwrites for this channel */
				permission_overwrites: components["schemas"]["PermissionOverwrite"][];
				/**
				 * Format: int32
				 * @description the position of this channel in the navbar
				 *
				 *     - lower numbers come first (0 is the first channel)
				 *     - channels with the same position are tiebroken by id
				 *     - channels without a position come last, ordered by newest first
				 */
				position?: number | null;
				/** @description for dm and gdm channels, this is who the dm is with */
				recipients: components["schemas"]["User"][];
				room_id?: null | components["schemas"]["Id"];
				/** Format: int64 */
				root_message_count?: number | null;
				/** @description tags that are applied to this thread */
				tags: components["schemas"]["Id"][];
				/** @description type specific data for this channel */
				type: components["schemas"]["ChannelType"];
				user_config?: null | components["schemas"]["UserConfigChannel"];
				/**
				 * Format: int64
				 * @description maximum number of users who can be in this voice channel
				 */
				user_limit?: number | null;
				/** @description only updates when the channel itself is updated, not the stuff in the channel */
				version_id: components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Connection: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				application: components["schemas"]["Application"];
				created_at: components["schemas"]["Time"];
				scopes: components["schemas"]["Scope"][];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_EmojiCustom: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				animated: boolean;
				creator_id: components["schemas"]["Id"];
				id: components["schemas"]["Id"];
				media_id: components["schemas"]["Id"];
				name: string;
				owner: components["schemas"]["EmojiOwner"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Integration: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				application: components["schemas"]["Application"];
				bot: components["schemas"]["User"];
				member: components["schemas"]["RoomMember"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Invite: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				/** @description the invite code for this invite */
				code: components["schemas"]["InviteCode"];
				/** @description the time when this invite was created */
				created_at: components["schemas"]["Time"];
				/** @description the user who created this invite */
				creator: components["schemas"]["User"];
				/** @description the id of the user who created this invite */
				creator_id: components["schemas"]["Id"];
				/** @description a description for this invite */
				description?: string | null;
				expires_at?: null | components["schemas"]["Time"];
				/** @description if this invite's code is custom (instead of random) */
				is_vanity: boolean;
				/** @description where this invite leads */
				target: components["schemas"]["InviteTarget"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Message: {
			cursor?: string | null;
			has_more: boolean;
			items: (components["schemas"]["MessageType"] & {
				/** @description the id of who sent this message */
				author_id: components["schemas"]["Id"];
				channel_id: components["schemas"]["Id"];
				created_at?: null | components["schemas"]["Time"];
				deleted_at?: null | components["schemas"]["Time"];
				edited_at?: null | components["schemas"]["Time"];
				id: components["schemas"]["Id"];
				mentions: components["schemas"]["Mentions"];
				/** @description unique string sent by the client via idempotency-key to identify this message */
				nonce?: string | null;
				pinned?: null | components["schemas"]["Pinned"];
				reactions?: components["schemas"]["ReactionCounts"];
				removed_at?: null | components["schemas"]["Time"];
				version_id: components["schemas"]["Id"];
			})[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Notification: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				/** @description when this was added to the inbox */
				added_at: components["schemas"]["Time"];
				/** @description the channel this message was sent in */
				channel_id: components["schemas"]["Id"];
				id: components["schemas"]["Id"];
				/** @description the id of the message that was sent */
				message_id: components["schemas"]["Id"];
				read_at?: null | components["schemas"]["Time"];
				/** @description why this was created */
				reason: components["schemas"]["NotificationReason"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_ReactionListItem: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				user_id: components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_RelationshipWithUserId: {
			cursor?: string | null;
			has_more: boolean;
			items: (components["schemas"]["Relationship"] & {
				user_id: components["schemas"]["Id"];
			})[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Role: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				description?: string | null;
				id: components["schemas"]["Id"];
				is_mentionable: boolean;
				is_self_applicable: boolean;
				/** Format: int64 */
				member_count: number;
				name: string;
				permissions: components["schemas"]["Permission"][];
				/**
				 * Format: int64
				 * @description tiebroken by id
				 */
				position: number;
				room_id: components["schemas"]["Id"];
				version_id: components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Room: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				archived_at?: null | components["schemas"]["Time"];
				/**
				 * Format: int64
				 * @description number of active channels
				 */
				channel_count: number;
				description?: string | null;
				icon?: null | components["schemas"]["Id"];
				/** @description A unique identifier for this room */
				id: components["schemas"]["Id"];
				/**
				 * Format: int64
				 * @description number of people in this room
				 */
				member_count: number;
				name: string;
				/**
				 * Format: int64
				 * @description number of people who are online in this room
				 */
				online_count: number;
				owner_id?: null | components["schemas"]["Id"];
				/** @description anyone can view and join */
				public: boolean;
				/** @description whether this room is read-only. permissions for all room members (including owner) will be masked to View and ViewAuditLog, similar to timing out a single user. */
				quarantined: boolean;
				type: components["schemas"]["RoomType"];
				user_config?: null | components["schemas"]["UserConfigRoom"];
				/**
				 * Format: uuid
				 * @description A monotonically increasing id that is updated every time this room is modified.
				 */
				version_id: string;
				welcome_channel_id?: null | components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_RoomBan: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				/** @description when the ban was created */
				created_at: components["schemas"]["Time"];
				expires_at?: null | components["schemas"]["Time"];
				/** @description the supplied reason why this user should be banned */
				reason?: string | null;
				/** @description the user who is banned */
				user_id: components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_RoomMember: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				/** @description whether this user is deafened by a moderator */
				deaf: boolean;
				/** @description When this member joined the room */
				joined_at: components["schemas"]["Time"];
				membership: components["schemas"]["RoomMembership"];
				/** @description whether this user is muted by a moderator */
				mute: boolean;
				origin?: null | components["schemas"]["RoomMemberOrigin"];
				/** @description like nickname, but for your description/bio/about */
				override_description?: string | null;
				/** @description aka nickname */
				override_name?: string | null;
				/** @description the roles that this member has */
				roles: components["schemas"]["Id"][];
				room_id: components["schemas"]["Id"];
				timeout_until?: null | components["schemas"]["Time"];
				user_id: components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_Session: {
			cursor?: string | null;
			has_more: boolean;
			items: (components["schemas"]["SessionStatus"] & {
				app_id?: null | components["schemas"]["Id"];
				expires_at?: null | components["schemas"]["Time"];
				id: components["schemas"]["Id"];
				/** @description the last time this session was used */
				last_seen_at: components["schemas"]["Time"];
				/** @description a human readable name for this session */
				name?: string | null;
				type: components["schemas"]["SessionType"];
			})[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_ThreadMember: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				/** @description When this member joined the thread */
				joined_at: components["schemas"]["Time"];
				membership: components["schemas"]["ThreadMembership"];
				thread_id: components["schemas"]["Id"];
				user_id: components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PaginationResponse_User: {
			cursor?: string | null;
			has_more: boolean;
			items: {
				avatar?: null | components["schemas"]["Id"];
				banner?: null | components["schemas"]["Id"];
				bot?: null | components["schemas"]["Bot"];
				deleted_at?: null | components["schemas"]["Time"];
				description?: string | null;
				emails?: components["schemas"]["EmailInfo"][] | null;
				id: components["schemas"]["Id"];
				name: string;
				puppet?: null | components["schemas"]["Puppet"];
				registered_at?: null | components["schemas"]["Time"];
				status: components["schemas"]["Status"];
				suspended?: null | components["schemas"]["Suspended"];
				system: boolean;
				user_config?: null | components["schemas"]["UserConfigUser"];
				version_id: components["schemas"]["Id"];
			}[];
			/** Format: int64 */
			total: number;
		};
		PasswordExec: components["schemas"]["PasswordExecIdent"] & {
			password: string;
		};
		/** @description who's logging in */
		PasswordExecIdent: {
			/** @enum {string} */
			type: "UserId";
			user_id: components["schemas"]["Id"];
		} | {
			email: components["schemas"]["EmailAddr"];
			/** @enum {string} */
			type: "Email";
		};
		PasswordSet: {
			password: string;
		};
		/**
		 * @description a permission that lets a user do something
		 * @enum {string}
		 */
		Permission:
			| "Admin"
			| "IntegrationsManage"
			| "EmojiManage"
			| "EmojiUseExternal"
			| "InviteCreate"
			| "InviteManage"
			| "MemberBan"
			| "MemberBridge"
			| "MemberKick"
			| "MemberNicknameManage"
			| "MessageAttachments"
			| "MessageCreate"
			| "MessageDelete"
			| "MessageRemove"
			| "MessageEmbeds"
			| "MessageMassMention"
			| "MessageMove"
			| "MessagePin"
			| "MemberNickname"
			| "MemberTimeout"
			| "ReactionAdd"
			| "ReactionPurge"
			| "RoleApply"
			| "RoleManage"
			| "RoomManage"
			| "ServerMetrics"
			| "ServerOversee"
			| "ServerReports"
			| "TagApply"
			| "TagManage"
			| "ChannelEdit"
			| "ChannelManage"
			| "ThreadCreatePrivate"
			| "ThreadCreatePublic"
			| "ThreadManage"
			| "ThreadEdit"
			| "ThreadLock"
			| "ViewChannel"
			| "ViewAuditLog"
			| "VoiceConnect"
			| "VoiceDeafen"
			| "VoiceDisconnect"
			| "VoiceMove"
			| "VoiceMute"
			| "VoicePriority"
			| "VoiceSpeak"
			| "VoiceVideo"
			| "CalendarEventManage";
		PermissionOverwrite: {
			/** @description extra permissions allowed here */
			allow: components["schemas"]["Permission"][];
			/** @description permissions denied here */
			deny: components["schemas"]["Permission"][];
			/**
			 * Format: uuid
			 * @description id of role or user
			 */
			id: string;
			/** @description whether this is for a user or role */
			type: components["schemas"]["PermissionOverwriteType"];
		};
		PermissionOverwriteSet: {
			/** @description extra permissions allowed here */
			allow: components["schemas"]["Permission"][];
			/** @description permissions denied here */
			deny: components["schemas"]["Permission"][];
			/** @description whether this is for a user or role */
			type: components["schemas"]["PermissionOverwriteType"];
		};
		/** @enum {string} */
		PermissionOverwriteType: "Role" | "User";
		/** @description information about a pinned message */
		Pinned: {
			/**
			 * Format: int32
			 * @description the position of this pin. lower numbers come first.
			 */
			position: number;
			/** @description when this was pinned */
			time: components["schemas"]["Time"];
		};
		/** @description reorder pinned messages */
		PinsReorder: {
			/** @description the messages to reorder */
			messages?: components["schemas"]["PinsReorderItem"][];
		};
		PinsReorderItem: {
			id: components["schemas"]["Id"];
			/** Format: int32 */
			position?: number | null;
		};
		/** @description represents a user on another platform */
		Puppet: {
			alias_id?: null | components["schemas"]["Id"];
			/** @description an opaque identifier from the other platform */
			external_id?: string;
			/** @description what platform this puppet is connected to */
			external_platform: components["schemas"]["ExternalPlatform"];
			/**
			 * Format: uri
			 * @description a url on the other platform that this account can be reached at
			 */
			external_url?: string | null;
			/** @description the user who created this puppet */
			owner_id: components["schemas"]["Id"];
		};
		PuppetCreate: {
			/** @description if this is a remote bot */
			bot: boolean;
			/** @description about/bio */
			description?: string | null;
			/** @description display name */
			name: string;
			/** @description if this is for the service itself. usually paired with bot: true */
			system: boolean;
		};
		/** @description the total reaction counts for a key */
		ReactionCount: {
			/** Format: int64 */
			count: number;
			key: components["schemas"]["Emoji"];
			self?: boolean;
		};
		/** @description the total reaction counts for all keys */
		ReactionCounts: components["schemas"]["ReactionCount"][];
		ReactionKey: components["schemas"]["Emoji"];
		ReactionListItem: {
			user_id: components["schemas"]["Id"];
		};
		Recurrence:
			| {
				/** Format: int32 */
				count?: number | null;
				cron: components["schemas"]["Cron"];
				/** @enum {string} */
				type: "Rule";
				until?: null | components["schemas"]["Time"];
			}
			| (components["schemas"]["Time"][] & {
				/** @enum {string} */
				type: "Include";
			})
			| (components["schemas"]["Time"][] & {
				/** @enum {string} */
				type: "Exclude";
			});
		Relationship: (null | components["schemas"]["Ignore"]) & {
			/** @description whatever you want to write */
			note?: string | null;
			/** @description personal petname for this user */
			petname?: string | null;
			relation?: null | components["schemas"]["RelationshipType"];
		};
		/**
		 * @description a relationship between two users
		 * @enum {string}
		 */
		RelationshipType: "Friend" | "Outgoing" | "Incoming" | "Block";
		RelationshipWithUserId: components["schemas"]["Relationship"] & {
			user_id: components["schemas"]["Id"];
		};
		/** @description moderation report */
		Report: {
			/** @description where the report is being sent to */
			destination: components["schemas"]["ReportDestination"];
			id: components["schemas"]["Id"];
			/** @description user supplied note */
			note?: string | null;
			/** @description built in reason */
			reason: components["schemas"]["ReportReason"];
			/** @description user id of who reported this */
			reporter_id: components["schemas"]["Id"];
			/** @description the associated thread id of this report. every report has a thread created for it. */
			thread_id: components["schemas"]["Id"];
		};
		ReportCreate: {
			/** @description user supplied note */
			note?: string | null;
			/** @description built in reason */
			reason: components["schemas"]["ReportReason"];
		};
		/**
		 * @description who the report is sent to
		 * @enum {string}
		 */
		ReportDestination: "Room" | "Server";
		/** @enum {string} */
		ReportReason:
			| "Illegal"
			| "IllegalGoods"
			| "IllegalExtortion"
			| "IllegalPornography"
			| "IllegalHacking"
			| "ExtremeViolence"
			| "PromotesHarm"
			| "UnsolicitedSpam"
			| "Raid"
			| "SpamAbuse"
			| "ScamsFraud"
			| "Malware"
			| "Harassment"
			| "InappropriateProfile"
			| "Impersonation"
			| "BanEvasion"
			| "Underage"
			| "Other";
		Role: {
			description?: string | null;
			id: components["schemas"]["Id"];
			is_mentionable: boolean;
			is_self_applicable: boolean;
			/** Format: int64 */
			member_count: number;
			name: string;
			permissions: components["schemas"]["Permission"][];
			/**
			 * Format: int64
			 * @description tiebroken by id
			 */
			position: number;
			room_id: components["schemas"]["Id"];
			version_id: components["schemas"]["Id"];
		};
		RoleCreate: {
			description?: string | null;
			/** @description if this role can be mentioned by members */
			is_mentionable?: boolean;
			is_self_applicable?: boolean;
			name: string;
			permissions?: components["schemas"]["Permission"][];
		};
		/** @description apply and remove a role to many members at once */
		RoleMemberBulkPatch: {
			/** @description add this role to these users */
			apply?: components["schemas"]["Id"][];
			/** @description remove this role from these users */
			remove?: components["schemas"]["Id"][];
		};
		RolePatch: {
			description?: string | null;
			is_mentionable?: boolean | null;
			is_self_applicable?: boolean | null;
			name?: string | null;
			permissions?: components["schemas"]["Permission"][] | null;
		};
		/** @description reorder some roles */
		RoleReorder: {
			/** @description the roles to reorder */
			roles?: components["schemas"]["RoleReorderItem"][];
		};
		RoleReorderItem: {
			/** Format: int64 */
			position: number;
			role_id: components["schemas"]["Id"];
		};
		/** @description A room is a collection of members and acls in the form of roles. Each room
		 *     has an audit log to log administrative actions.
		 *
		 *     Default rooms, which most people are concerned with, contain threads, emoji,
		 *     and so on for instant messaging. */
		Room: {
			archived_at?: null | components["schemas"]["Time"];
			/**
			 * Format: int64
			 * @description number of active channels
			 */
			channel_count: number;
			description?: string | null;
			icon?: null | components["schemas"]["Id"];
			/** @description A unique identifier for this room */
			id: components["schemas"]["Id"];
			/**
			 * Format: int64
			 * @description number of people in this room
			 */
			member_count: number;
			name: string;
			/**
			 * Format: int64
			 * @description number of people who are online in this room
			 */
			online_count: number;
			owner_id?: null | components["schemas"]["Id"];
			/** @description anyone can view and join */
			public: boolean;
			/** @description whether this room is read-only. permissions for all room members (including owner) will be masked to View and ViewAuditLog, similar to timing out a single user. */
			quarantined: boolean;
			type: components["schemas"]["RoomType"];
			user_config?: null | components["schemas"]["UserConfigRoom"];
			/**
			 * Format: uuid
			 * @description A monotonically increasing id that is updated every time this room is modified.
			 */
			version_id: string;
			welcome_channel_id?: null | components["schemas"]["Id"];
		};
		/** @description represents a restriction on who can join the room */
		RoomBan: {
			/** @description when the ban was created */
			created_at: components["schemas"]["Time"];
			expires_at?: null | components["schemas"]["Time"];
			/** @description the supplied reason why this user should be banned */
			reason?: string | null;
			/** @description the user who is banned */
			user_id: components["schemas"]["Id"];
		};
		/** @description create many bans at once */
		RoomBanBulkCreate: {
			expires_at?: null | components["schemas"]["Time"];
			/** @description who to ban */
			target_ids?: components["schemas"]["Id"][];
		};
		RoomBanCreate: {
			expires_at?: null | components["schemas"]["Time"];
		};
		/** @description Data required to create a room */
		RoomCreate: {
			description?: string | null;
			icon?: null | components["schemas"]["Id"];
			name: string;
			public?: boolean | null;
		};
		RoomMember: {
			/** @description whether this user is deafened by a moderator */
			deaf: boolean;
			/** @description When this member joined the room */
			joined_at: components["schemas"]["Time"];
			membership: components["schemas"]["RoomMembership"];
			/** @description whether this user is muted by a moderator */
			mute: boolean;
			origin?: null | components["schemas"]["RoomMemberOrigin"];
			/** @description like nickname, but for your description/bio/about */
			override_description?: string | null;
			/** @description aka nickname */
			override_name?: string | null;
			/** @description the roles that this member has */
			roles: components["schemas"]["Id"][];
			room_id: components["schemas"]["Id"];
			timeout_until?: null | components["schemas"]["Time"];
			user_id: components["schemas"]["Id"];
		};
		RoomMemberOrigin: {
			/** @description the invite code they joined with */
			code: components["schemas"]["InviteCode"];
			/** @description the user who created the invite */
			inviter: components["schemas"]["Id"];
			/** @enum {string} */
			type: "Invite";
		} | {
			/** @enum {string} */
			type: "BotInstall";
			/** @description the user who installed this bot */
			user_id: components["schemas"]["Id"];
		} | {
			/** @description the bridge that owns this puppet */
			bridge_id: components["schemas"]["Id"];
			/** @enum {string} */
			type: "Bridged";
		} | {
			/** @enum {string} */
			type: "Creator";
		} | {
			/** @enum {string} */
			type: "GdmUpgrade";
		};
		RoomMemberPatch: {
			/** @description whether this user is deafened by a moderator */
			deaf?: boolean | null;
			/** @description whether this user is muted by a moderator */
			mute?: boolean | null;
			override_description?: string | null;
			override_name?: string | null;
			/** @description the roles that this member has */
			roles?: components["schemas"]["Id"][] | null;
			timeout_until?: null | components["schemas"]["Time"];
		};
		RoomMemberPut: {
			/** @description whether this user is deafened by a moderator */
			deaf?: boolean | null;
			/** @description whether this user is muted by a moderator */
			mute?: boolean | null;
			override_description?: string | null;
			override_name?: string | null;
			/** @description the roles that this member has */
			roles?: components["schemas"]["Id"][] | null;
			timeout_until?: null | components["schemas"]["Time"];
		};
		RoomMemberSearchResponse: {
			items: components["schemas"]["RoomMember"][];
		};
		/** @enum {string} */
		RoomMembership: "Join" | "Leave";
		RoomMetrics: {
			/**
			 * Format: int64
			 * @description Number of active channels in this room (excluding archived or removed ones).
			 */
			active_channel_count: number;
			/**
			 * Format: int64
			 * @description Total number of channels in this room (including archived or removed ones).
			 */
			channel_count: number;
			/**
			 * Format: int64
			 * @description Total number of attachments from messages in this room.
			 */
			media_count: number;
			/**
			 * Format: int64
			 * @description Combined size (in bytes) of all attachments in this room.
			 */
			media_size: number;
			/**
			 * Format: int64
			 * @description Total number of members in this room.
			 */
			member_count: number;
			/**
			 * Format: int64
			 * @description Total number of messages across all active threads in this room (excluding removed messages).
			 */
			message_count: number;
		};
		/** @description An update to a room */
		RoomPatch: {
			description?: string | null;
			icon?: null | components["schemas"]["Id"];
			name?: string | null;
			public?: boolean | null;
			welcome_channel_id?: null | components["schemas"]["Id"];
		};
		/** @enum {string} */
		RoomType: "Default" | "Server";
		/**
		 * @description an oauth scope
		 *
		 *     WORK IN PROGRESS!!! SUBJECT TO CHANGE!!!
		 * @enum {string}
		 */
		Scope: "identify" | "full" | "auth";
		SearchChannelsRequest: {
			/** @description Only return archived (or unarchived) threads */
			archived?: boolean | null;
			/** @description Only return threads with these parents. Defaults to all threads. */
			parent_id?: components["schemas"]["Id"][];
			/** @description The full text search query. Consider this an implementation detail, but I currently use postgres' [`websearch_to_tsquery`](https://www.postgresql.org/docs/17/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES) function. */
			query?: string | null;
			/** @description Only return removed (or not removed) threads */
			removed?: boolean | null;
			/** @description Only return threads in these rooms. Defaults to all rooms. */
			room_id?: components["schemas"]["Id"][];
		};
		SearchMessageRequest: {
			/** @description Only return messages that have an attachment of any type */
			has_attachment?: boolean | null;
			/** @description Only return messages that have an attachment of type audio/* */
			has_audio?: boolean | null;
			/** @description Only return messages that have an embed */
			has_embed?: boolean | null;
			/** @description Only return messages that have an attachment of type image/* */
			has_image?: boolean | null;
			/** @description Only return messages that have a link */
			has_link?: boolean | null;
			/** @description Only return messages that have an attachment of type video/* */
			has_video?: boolean | null;
			/** @description Only return messages that have links from these domains */
			link_hostnames?: string[];
			/** @description Only return messages that mentions everyone */
			mentions_everyone?: boolean | null;
			/** @description Only return messages that mention these roles */
			mentions_roles?: components["schemas"]["Id"][];
			/** @description Only return messages that mention these users */
			mentions_users?: components["schemas"]["Id"][];
			/** @description Only return pinned (or unpinned) messages */
			pinned?: boolean | null;
			/** @description The full text search query. Consider this an implementation detail, but I currently use postgres' [`websearch_to_tsquery`](https://www.postgresql.org/docs/17/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES) function. */
			query?: string | null;
			room_id?: components["schemas"]["Id"][];
			/** @description Only return messages in these threads. Defaults to all threads. */
			thread_id?: components["schemas"]["Id"][];
			/** @description Only return messages from these users. Defaults to all threads. */
			user_id?: components["schemas"]["Id"][];
		};
		SearchRoomsRequest: {
			/** @description The full text search query. Consider this an implementation detail, but I currently use postgres' [`websearch_to_tsquery`](https://www.postgresql.org/docs/17/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES) function. */
			query?: string;
		};
		ServerVersion: {
			debug: boolean;
			rev: string;
			rustc_channel: string;
			rustc_llvm: string;
			rustc_rev: string;
			rustc_semver: string;
			target: string;
		};
		Session: components["schemas"]["SessionStatus"] & {
			app_id?: null | components["schemas"]["Id"];
			expires_at?: null | components["schemas"]["Time"];
			id: components["schemas"]["Id"];
			/** @description the last time this session was used */
			last_seen_at: components["schemas"]["Time"];
			/** @description a human readable name for this session */
			name?: string | null;
			type: components["schemas"]["SessionType"];
		};
		SessionCreate: {
			name?: string | null;
		};
		/** @description webrtc session description */
		SessionDescription: string;
		SessionPatch: {
			name?: string | null;
		};
		SessionStatus: {
			/** @enum {string} */
			status: "Unauthorized";
		} | {
			/** @enum {string} */
			status: "Authorized";
			user_id: components["schemas"]["Id"];
		} | {
			/** @enum {string} */
			status: "Sudo";
			sudo_expires_at: components["schemas"]["Time"];
			user_id: components["schemas"]["Id"];
		};
		SessionToken: string;
		/** @enum {string} */
		SessionType: "User" | "Access";
		SessionWithToken: components["schemas"]["Session"] & {
			token: components["schemas"]["SessionToken"];
		};
		/** @description messages that either the sfu or client can send to each other */
		SignallingMessage: {
			/** @description the id of the selected sfu. internal; for debugging. */
			sfu_id: components["schemas"]["Id"];
			/** @enum {string} */
			type: "Ready";
		} | {
			sdp: components["schemas"]["SessionDescription"];
			tracks: components["schemas"]["TrackMetadata"][];
			/** @enum {string} */
			type: "Offer";
		} | {
			sdp: components["schemas"]["SessionDescription"];
			/** @enum {string} */
			type: "Answer";
		} | {
			candidate: components["schemas"]["IceCandidate"];
			/** @enum {string} */
			type: "Candidate";
		} | {
			thread_id: components["schemas"]["Id"];
			tracks: components["schemas"]["TrackMetadata"][];
			/** @enum {string} */
			type: "Have";
			user_id: components["schemas"]["Id"];
		} | {
			tracks: components["schemas"]["TrackId"][];
			/** @enum {string} */
			type: "Want";
		} | {
			state?: null | components["schemas"]["VoiceStateUpdate"];
			/** @enum {string} */
			type: "VoiceState";
		} | {
			/** @enum {string} */
			type: "Reconnect";
		};
		/** @description the current status of the user */
		Status:
			& components["schemas"]["StatusType"]
			& (null | components["schemas"]["StatusText"]);
		/** @description an update to a user's status */
		StatusPatch:
			& (null | components["schemas"]["StatusTypePatch"])
			& (null | components["schemas"]["StatusText"]);
		StatusText: {
			clear_at?: null | components["schemas"]["Time"];
			text: string;
		};
		StatusType: {
			/** @enum {string} */
			type: "Offline";
		} | {
			/** @enum {string} */
			type: "Online";
		} | {
			/** @enum {string} */
			type: "Away";
		} | {
			/** @description busy might be set automatically when they look busy
			 *     but it might not be that important
			 *     this explicitly says "do not disturb" */
			dnd: boolean;
			/** @enum {string} */
			type: "Busy";
		} | {
			/** @enum {string} */
			type: "Available";
		};
		/** @description data user sends to update StatusType */
		StatusTypePatch: {
			/** @enum {string} */
			type: "Offline";
		} | {
			/** @enum {string} */
			type: "Online";
		} | {
			/** @enum {string} */
			type: "Away";
		} | {
			/** @description busy might be set automatically when they look busy
			 *     but it might not be that important
			 *     this explicitly says "do not disturb" */
			dnd: boolean;
			/** @enum {string} */
			type: "Busy";
		} | {
			/** @enum {string} */
			type: "Available";
		};
		SuspendRequest: {
			expires_at?: null | components["schemas"]["Time"];
		};
		Suspended: {
			created_at: components["schemas"]["Time"];
			expires_at?: null | components["schemas"]["Time"];
			reason?: string | null;
		};
		/** @description metadata for text */
		Text: {
			language?: null | components["schemas"]["Language"];
		};
		ThreadMember: {
			/** @description When this member joined the thread */
			joined_at: components["schemas"]["Time"];
			membership: components["schemas"]["ThreadMembership"];
			thread_id: components["schemas"]["Id"];
			user_id: components["schemas"]["Id"];
		};
		ThreadMemberPut: Record<string, never>;
		/** @enum {string} */
		ThreadMembership: "Join" | "Leave";
		/**
		 * Format: date-time
		 * @description A date, time, and timezone. Serialized to rfc3339.
		 */
		Time: string;
		/** @description metadata for captions/subtitles */
		TimedText: {
			/** Format: int64 */
			duration: number;
			language?: null | components["schemas"]["Language"];
		};
		TotpRecoveryCode: {
			code: string;
			used?: null | components["schemas"]["TotpRecoveryCodeUsed"];
		};
		/** @description information about who used this code */
		TotpRecoveryCodeUsed: {
			used_at: components["schemas"]["Time"];
			used_by?: null | components["schemas"]["Id"];
		};
		TotpRecoveryCodes: {
			items: components["schemas"]["TotpRecoveryCode"][];
		};
		TotpState: {
			is_valid: boolean;
		};
		TotpStateWithSecret: components["schemas"]["TotpState"] & {
			secret: string;
		};
		TotpVerificationRequest: {
			code: string;
		};
		/** @description a unique identifier for a media track (corresponds to a transceiver in webrtc, or a Mid in str0m) */
		TrackId: string;
		/** @description metadata about a track */
		TrackMetadata: {
			/** @description group tracks together into streams; identical to ssrc but easier to manage client side
			 *
			 *     currently there are two streams `user` and `screen` used by frontend */
			key: string;
			/** @description whether this track is for audio or video */
			kind: components["schemas"]["MediaKind"];
			/** @description unique identifier for this track. equivalent to transceiver.mid */
			mid: components["schemas"]["TrackId"];
		};
		/** @description Where this track came from. */
		TrackSource: {
			/** @enum {string} */
			source: "Uploaded";
		} | {
			/** @enum {string} */
			source: "Downloaded";
			/** Format: uri */
			source_url: string;
		} | {
			/** @enum {string} */
			source: "Extracted";
		} | {
			/** @enum {string} */
			source: "Generated";
		};
		TransferOwnership: {
			owner_id: components["schemas"]["Id"];
		};
		User: {
			avatar?: null | components["schemas"]["Id"];
			banner?: null | components["schemas"]["Id"];
			bot?: null | components["schemas"]["Bot"];
			deleted_at?: null | components["schemas"]["Time"];
			description?: string | null;
			emails?: components["schemas"]["EmailInfo"][] | null;
			id: components["schemas"]["Id"];
			name: string;
			puppet?: null | components["schemas"]["Puppet"];
			registered_at?: null | components["schemas"]["Time"];
			status: components["schemas"]["Status"];
			suspended?: null | components["schemas"]["Suspended"];
			system: boolean;
			user_config?: null | components["schemas"]["UserConfigUser"];
			version_id: components["schemas"]["Id"];
		};
		/** @description configuration for a user in a thread */
		UserConfigChannel: {
			/** @description config specific to frontend */
			frontend: {
				[key: string]: unknown;
			};
			/** @description thread notification config */
			notifs: components["schemas"]["NotifsChannel"];
		};
		/** @description configuration for a user */
		UserConfigGlobal: {
			/** @description config specific to frontend */
			frontend: {
				[key: string]: unknown;
			};
			/** @description global notification config */
			notifs: components["schemas"]["NotifsGlobal"];
		};
		/** @description configuration for a user in a room */
		UserConfigRoom: {
			/** @description config specific to frontend */
			frontend: {
				[key: string]: unknown;
			};
			/** @description room notification config */
			notifs: components["schemas"]["NotifsRoom"];
		};
		/** @description configuration for a user for another user */
		UserConfigUser: {
			/** @description config specific to frontend */
			frontend: {
				[key: string]: unknown;
			};
			/** @description config in voice threads */
			voice: components["schemas"]["VoiceConfig"];
		};
		UserCreate: {
			description?: string | null;
			name: string;
		};
		UserIdReq: null | components["schemas"]["Id"];
		/** @enum {string} */
		UserListFilter: "guest" | "registered" | "bot" | "puppet";
		UserListParams: {
			filter?: null | components["schemas"]["UserListFilter"];
		};
		UserPatch: {
			avatar?: null | components["schemas"]["Id"];
			banner?: null | components["schemas"]["Id"];
			description?: string | null;
			name?: string | null;
		};
		UserWithRelationship: components["schemas"]["User"] & {
			relationship: components["schemas"]["Relationship"];
		};
		/** @description user info response for openid connect */
		Userinfo: {
			email?: null | components["schemas"]["EmailAddr"];
			/** @description if the provided email has been verified or not */
			email_verified: boolean;
			/**
			 * Format: uri
			 * @description oauth issuer
			 */
			iss: string;
			/** @description user's name */
			name: string;
			/**
			 * Format: uri
			 * @description link to the user's avatar. returns the full size image, not a thumbnail.
			 */
			picture?: string | null;
			/** @description html url to the user's profile page */
			profile: string;
			/** @description user's uuid */
			sub: components["schemas"]["Id"];
			/**
			 * Format: int64
			 * @description calculated from version_id
			 */
			updated_at: number;
		};
		/** @description metadata for videos */
		Video: {
			codec: string;
			/** Format: int64 */
			duration: number;
			/** Format: int64 */
			height: number;
			language?: null | components["schemas"]["Language"];
			/** Format: int64 */
			width: number;
		};
		/** @description voice config the local user can set on someone else */
		VoiceConfig: {
			/** @description whether to mute voice */
			mute: boolean;
			/**
			 * Format: double
			 * @description defaults to 1 (aka 100% volume)
			 */
			volume: number;
		};
		/** @description represents a user that is connected to a voice thread (older docs call this a "voice connection")
		 *
		 *     connection limits:
		 *     - users can only have one active connection across all threads
		 *     - bots can connect to multiple threads with any connection strategy
		 *     - both users and bots can only have one connection per thread */
		VoiceState: {
			/** @description whether this user is deafened by a moderator */
			deaf: boolean;
			/** @description when this user joined the call */
			joined_at: components["schemas"]["Time"];
			/** @description whether this user is muted by a moderator */
			mute: boolean;
			self_deaf: boolean;
			self_mute: boolean;
			self_screen: boolean;
			self_video: boolean;
			session_id?: null | components["schemas"]["Id"];
			/** @description the thread this user is connected to */
			thread_id: components["schemas"]["Id"];
			/** @description the user this state belongs to */
			user_id: components["schemas"]["Id"];
		};
		VoiceStateMove: {
			target_id: components["schemas"]["Id"];
		};
		/** @description represents an update that a user would like to make to their voice state */
		VoiceStateUpdate: {
			self_deaf: boolean;
			self_mute: boolean;
			self_screen: boolean;
			self_video: boolean;
			thread_id: components["schemas"]["Id"];
		};
		WebauthnAuthenticator: {
			created_at: components["schemas"]["Time"];
			/** Format: uuid */
			id: string;
			name: string;
		};
		WebauthnChallenge: {
			/** @description public key credentials request as stringified json */
			challenge: string;
		};
		WebauthnFinish: {
			/** @description public key credentials response as stringified json */
			credential: string;
			/** @description if this authenticator should be registered if it doesn't exist yet */
			register: boolean;
		};
		WebauthnPatch: {
			name?: string | null;
		};
		Webhook: {
			avatar?: null | components["schemas"]["Id"];
			id: components["schemas"]["Id"];
			name: string;
			room_id?: null | components["schemas"]["Id"];
			thread_id: components["schemas"]["Id"];
			token?: string | null;
		};
		WebhookCreate: {
			avatar?: null | components["schemas"]["Id"];
			name: string;
		};
		WebhookUpdate: {
			avatar?: null | components["schemas"]["Id"];
			name?: string | null;
			rotate_token?: boolean;
			thread_id?: null | components["schemas"]["Id"];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	admin_broadcast: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AdminBroadcast"];
			};
		};
		responses: {
			/** @description ok */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	admin_whisper: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AdminWhisper"];
			};
		};
		responses: {
			/** @description ok */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	app_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Application"];
				};
			};
		};
	};
	app_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ApplicationCreate"];
			};
		};
		responses: {
			/** @description success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Application"];
				};
			};
		};
	};
	app_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				app_id: components["schemas"]["ApplicationIdReq"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Application"];
				};
			};
		};
	};
	app_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				app_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	app_patch: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				app_id: components["schemas"]["ApplicationIdReq"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ApplicationPatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Application"];
				};
			};
		};
	};
	app_invite_bot: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				app_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AppInviteBot"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	puppet_ensure: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				app_id: components["schemas"]["ApplicationIdReq"];
				puppet_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PuppetCreate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
			/** @description created */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
		};
	};
	app_rotate_secret: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				app_id: components["schemas"]["ApplicationIdReq"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Application"];
				};
			};
		};
	};
	app_create_session: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				app_id: components["schemas"]["ApplicationIdReq"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SessionCreate"];
			};
		};
		responses: {
			/** @description success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SessionWithToken"];
				};
			};
		};
	};
	auth_state: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AuthState"];
				};
			};
		};
	};
	auth_sudo: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_captcha_init: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CaptchaChallenge"];
				};
			};
		};
	};
	auth_captcha_submit: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CaptchaResponse"];
			};
		};
		responses: {
			/** @description captcha ok */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description captcha failure */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_email_exec: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Email address */
				addr: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			202: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_email_complete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Email address */
				addr: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AuthEmailComplete"];
			};
		};
		responses: {
			/** @description success */
			202: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_email_reset: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Email address */
				addr: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			202: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_oauth_init: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description oauth provider */
				provider: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ready */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["OauthInitResponse"];
				};
			};
		};
	};
	auth_oauth_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description oauth provider */
				provider: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_oauth_redirect: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description oauth provider */
				provider: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success; responds with html + javascript */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_password_set: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PasswordSet"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_password_exec: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PasswordExec"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_password_delete: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_totp_exec: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["TotpVerificationRequest"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TotpState"];
				};
			};
		};
	};
	auth_totp_delete: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_totp_init: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TotpStateWithSecret"];
				};
			};
		};
	};
	auth_totp_recovery_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TotpRecoveryCodes"];
				};
			};
		};
	};
	auth_totp_recovery_rotate: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["TotpRecoveryCodes"];
				};
			};
		};
	};
	auth_webauthn_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				authenticator_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_webauthn_patch: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				authenticator_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["WebauthnPatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["WebauthnAuthenticator"];
				};
			};
		};
	};
	auth_webauthn_exec: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["WebauthnFinish"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	auth_webauthn_init: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description webauthn challenge */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["WebauthnChallenge"];
				};
			};
		};
	};
	calendar_event_list: {
		parameters: {
			query?: {
				from?: null | components["schemas"]["Id"];
				to?: null | components["schemas"]["Id"];
				limit?: number | null;
				from_time?: string | null;
				to_time?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	calendar_thread_event_list: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	calendar_thread_event_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CalendarEventCreate"];
			};
		};
		responses: {
			/** @description Create calendar event success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CalendarEvent"];
				};
			};
		};
	};
	calendar_thread_event_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description Calendar event id */
				calendar_event_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Get calendar event success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CalendarEvent"];
				};
			};
		};
	};
	calendar_thread_event_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description Calendar event id */
				calendar_event_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Delete calendar event success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	calendar_thread_event_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description Calendar event id */
				calendar_event_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["CalendarEventPatch"];
			};
		};
		responses: {
			/** @description Update calendar event success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CalendarEvent"];
				};
			};
		};
	};
	calendar_thread_event_rsvp_list: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description Calendar event id */
				calendar_event_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	calendar_thread_event_rsvp_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description Calendar event id */
				calendar_event_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	calendar_thread_event_rsvp_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description Calendar event id */
				calendar_event_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	calendar_thread_event_rsvp_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description Calendar event id */
				calendar_event_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_create_dm: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ChannelCreate"];
			};
		};
		responses: {
			/** @description Create thread success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
		};
	};
	channel_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Get thread success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
		};
	};
	channel_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ChannelPatch"];
			};
		};
		responses: {
			/** @description edit message success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
			/** @description no change */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
		};
	};
	channel_ack: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AckReq"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_archive: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
			/** @description didn't change anything */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
		};
	};
	channel_unarchive: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
			/** @description didn't change anything */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
		};
	};
	message_context: {
		parameters: {
			query?: {
				to_start?: null | components["schemas"]["Id"];
				to_end?: null | components["schemas"]["Id"];
				limit?: number | null;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List thread messages success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ContextResponse"];
				};
			};
		};
	};
	channel_lock: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_unlock: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List thread messages success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	message_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["MessageCreate"];
			};
		};
		responses: {
			/** @description Create message success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Message"];
				};
			};
		};
	};
	message_moderate: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["MessageModerate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_list_deleted: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	message_list_removed: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	message_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List thread messages success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Message"];
				};
			};
		};
	};
	message_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description delete message success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_edit: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["MessagePatch"];
			};
		};
		responses: {
			/** @description edit message success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Message"];
				};
			};
			/** @description no change */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	reaction_purge: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	reaction_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
				/** @description Reaction key */
				key: components["schemas"]["ReactionKey"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_ReactionListItem"];
				};
			};
		};
	};
	reaction_add: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
				/** @description Reaction key */
				key: components["schemas"]["ReactionKey"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description already exists */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description new reaction created */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	reaction_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
				/** @description Reaction key */
				key: components["schemas"]["ReactionKey"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_version_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	message_version_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
				/** @description Version id */
				version_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Message"];
				};
			};
		};
	};
	message_move: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["MessageMigrate"];
			};
		};
		responses: {
			/** @description move success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	permission_overwrite: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Role or user id */
				overwrite_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PermissionOverwriteSet"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	permission_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Role or user id */
				overwrite_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_pin_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List pinned messages success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	message_pin_reorder: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PinsReorder"];
			};
		};
		responses: {
			/** @description Reorder pinned messages success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_pin_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_pin_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_restore: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	message_roots: {
		parameters: {
			query?: {
				/** @description how deeply to fetch replies */
				depth?: number;
				/** @description how many replies to fetch per branch */
				breadth?: number | null;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List thread messages success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	message_replies: {
		parameters: {
			query?: {
				/** @description how deeply to fetch replies */
				depth?: number;
				/** @description how many replies to fetch per branch */
				breadth?: number | null;
			};
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: components["schemas"]["Id"];
				/** @description Message id */
				message_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List thread messages success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	channel_transfer_ownership: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["TransferOwnership"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_typing: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_upgrade: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Room"];
				};
			};
		};
	};
	list_webhooks_thread: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List webhooks success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Webhook"][];
				};
			};
		};
	};
	create_webhook: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["WebhookCreate"];
			};
		};
		responses: {
			/** @description Create webhook success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Webhook"];
				};
			};
		};
	};
	user_config_global_get: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigGlobal"];
				};
			};
		};
	};
	user_config_global_put: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserConfigGlobal"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigGlobal"];
				};
			};
		};
	};
	user_config_channel_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Channel id */
				channel_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigChannel"];
				};
			};
		};
	};
	user_config_room_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigRoom"];
				};
			};
		};
	};
	user_config_room_put: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserConfigRoom"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigRoom"];
				};
			};
		};
	};
	user_config_channel_put: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserConfigChannel"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigChannel"];
				};
			};
		};
	};
	user_config_user_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigUser"];
				};
			};
		};
	};
	user_config_user_put: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserConfigUser"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserConfigUser"];
				};
			};
		};
	};
	debug_embed_url: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["EmbedRequest"];
			};
		};
		responses: {
			/** @description success */
			202: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	debug_info: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ServerVersion"];
				};
			};
		};
	};
	debug_panic: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	debug_version: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ServerVersion"];
				};
			};
		};
	};
	emoji_lookup: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Emoji id */
				emoji_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_EmojiCustom"];
				};
			};
		};
	};
	guest_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserCreate"];
			};
		};
		responses: {
			/** @description guest account created */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
		};
	};
	inbox_get: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
				/** @description only include notifications from these rooms */
				room_id?: components["schemas"]["Id"][];
				/** @description only include notifications from these channels */
				channel_id?: components["schemas"]["Id"][];
				/** @description include messages marked as read too */
				include_read?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["NotificationPagination"];
				};
			};
		};
	};
	inbox_post: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NotificationCreate"];
			};
		};
		responses: {
			/** @description success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Notification"];
				};
			};
		};
	};
	inbox_channels: {
		parameters: {
			query: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
				/** @description only include notifications from these rooms */
				room_id?: components["schemas"]["Id"][];
				/** @description only include notifications from these channels */
				channel_id?: components["schemas"]["Id"][];
				/** @description include messages marked as read too */
				include_read?: boolean;
				/** @description the order to return inbox channels in */
				order: components["schemas"]["InboxChannelsOrder"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Channel"];
				};
			};
		};
	};
	inbox_flush: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NotificationFlush"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	inbox_mark_read: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NotificationMarkRead"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	inbox_mark_unread: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NotificationMarkRead"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	internal_rpc: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Switching Protocols */
			101: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	invite_resolve: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The code identifying this invite */
				invite_code: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success with metadata */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["InviteWithMetadata"];
				};
			};
		};
	};
	invite_use: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The code identifying this invite */
				invite_code: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	invite_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The code identifying this invite */
				invite_code: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	invite_patch: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description The code identifying this invite */
				invite_code: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["InvitePatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Invite"];
				};
			};
			/** @description not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	media_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["MediaCreate"];
			};
		};
		responses: {
			/** @description Create media success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["MediaCreated"];
				};
			};
		};
	};
	media_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Media id */
				media_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Media"];
				};
			};
		};
	};
	media_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Media id */
				media_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description no content */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description media is linked to another resource (ie. a message) */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	media_patch: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Media id */
				media_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["MediaPatch"];
			};
		};
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Media"];
				};
			};
			/** @description Not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	media_done: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Media id */
				media_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Media"];
				};
			};
		};
	};
	oauth_autoconfig: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Autoconfig"];
				};
			};
		};
	};
	oauth_info: {
		parameters: {
			query: {
				response_type: string;
				client_id: components["schemas"]["Id"];
				scope: string;
				state?: string | null;
				redirect_uri?: string | null;
				prompt?: string | null;
				code_challenge?: string | null;
				code_challenge_method?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["OauthAuthorizeInfo"];
				};
			};
		};
	};
	oauth_authorize: {
		parameters: {
			query: {
				response_type: string;
				client_id: components["schemas"]["Id"];
				scope: string;
				state?: string | null;
				redirect_uri?: string | null;
				prompt?: string | null;
				code_challenge?: string | null;
				code_challenge_method?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["OauthAuthorizeResponse"];
				};
			};
		};
	};
	oauth_introspect: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["OauthIntrospectResponse"];
				};
			};
		};
	};
	oauth_revoke: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	oauth_token: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["OauthTokenRequest"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["OauthTokenResponse"];
				};
			};
		};
	};
	oauth_userinfo: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Userinfo"];
				};
			};
		};
	};
	public_channels: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	public_rooms: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	room_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Paginate room success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaginationResponse_Room"];
				};
			};
		};
	};
	room_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoomCreate"];
			};
		};
		responses: never;
	};
	room_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Get room success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Room"];
				};
			};
			/** @description Not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_edit: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoomPatch"];
			};
		};
		responses: {
			/** @description edit success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description no change */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_ack: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_audit_logs: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description fetch audit logs success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_AuditLogEntry"];
				};
			};
		};
	};
	list_rules: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List automod rules success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_AutomodRule"];
				};
			};
		};
	};
	create_rule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AutomodRuleCreate"];
			};
		};
		responses: {
			/** @description Create automod rule success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AutomodRule"];
				};
			};
		};
	};
	get_rule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Rule id */
				rule_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Get automod rule success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AutomodRule"];
				};
			};
		};
	};
	delete_rule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Rule id */
				rule_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Delete automod rule success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	update_rule: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Rule id */
				rule_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AutomodRuleUpdate"];
			};
		};
		responses: {
			/** @description Update automod rule success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AutomodRule"];
				};
			};
		};
	};
	room_ban_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_RoomBan"];
				};
			};
		};
	};
	room_ban_create_bulk: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoomBanBulkCreate"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_ban_search: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				from: string;
				to: string;
				dir: "b" | "f";
				limit: number;
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_RoomBan"];
				};
			};
		};
	};
	room_ban_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomBan"];
				};
			};
		};
	};
	room_ban_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoomBanCreate"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_ban_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	channel_list: {
		parameters: {
			query?: {
				parent_id?: null | components["schemas"]["Id"];
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List room channels success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Channel"];
				};
			};
		};
	};
	channel_create_room: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ChannelCreate"];
			};
		};
		responses: {
			/** @description Create thread success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Channel"];
				};
			};
		};
	};
	channel_reorder: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ChannelReorder"];
			};
		};
		responses: {
			/** @description Reorder channels success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	channel_list_archived: {
		parameters: {
			query?: {
				parent_id?: null | components["schemas"]["Id"];
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List archived room channels success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Channel"];
				};
			};
		};
	};
	emoji_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_EmojiCustom"];
				};
			};
		};
	};
	emoji_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["EmojiCustomCreate"];
			};
		};
		responses: {
			/** @description new emoji created */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["EmojiCustom"];
				};
			};
		};
	};
	emoji_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Emoji id */
				emoji_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["EmojiCustom"];
				};
			};
		};
	};
	emoji_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Emoji id */
				emoji_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	emoji_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Emoji id */
				emoji_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["EmojiCustomPatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["EmojiCustom"];
				};
			};
			/** @description not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_integration_list: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Integration"];
				};
			};
		};
	};
	invite_room_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Invite"];
				};
			};
		};
	};
	invite_room_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["InviteCreate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Invite"];
				};
			};
		};
	};
	room_member_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_RoomMember"];
				};
			};
		};
	};
	room_member_search: {
		parameters: {
			query: {
				query: string;
				limit?: number | null;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomMemberSearchResponse"];
				};
			};
		};
	};
	room_member_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomMember"];
				};
			};
		};
	};
	room_member_add: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoomMemberPut"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomMember"];
				};
			};
			/** @description not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_member_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_member_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoomMemberPatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomMember"];
				};
			};
			/** @description not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_metrics: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomMetrics"];
				};
			};
		};
	};
	room_quarantine: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_unquarantine: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	report_create_room: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ReportCreate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Report"];
				};
			};
		};
	};
	role_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaginationResponse_Role"];
				};
			};
		};
	};
	role_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoleCreate"];
			};
		};
		responses: {
			/** @description success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Role"];
				};
			};
		};
	};
	role_reorder: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoleReorder"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	role_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Role id */
				role_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Role"];
				};
			};
		};
	};
	role_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Role id */
				role_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	role_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Role id */
				role_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RolePatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Role"];
				};
			};
			/** @description success */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	role_member_list: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Role id */
				role_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_RoomMember"];
				};
			};
		};
	};
	role_member_bulk_edit: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Role id */
				role_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RoleMemberBulkPatch"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	role_member_add: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Role id */
				role_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomMember"];
				};
			};
		};
	};
	role_member_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
				/** @description Role id */
				role_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RoomMember"];
				};
			};
		};
	};
	channel_list_removed: {
		parameters: {
			query?: {
				parent_id?: null | components["schemas"]["Id"];
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List removed room threads success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Channel"];
				};
			};
		};
	};
	room_transfer_ownership: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["TransferOwnership"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	room_undelete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_webhooks_room: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Room id */
				room_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List webhooks success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Webhook"][];
				};
			};
		};
	};
	search_channels: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SearchChannelsRequest"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Channel"];
				};
			};
		};
	};
	search_messages: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SearchMessageRequest"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Message"];
				};
			};
		};
	};
	search_rooms: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SearchRoomsRequest"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaginationResponse_Room"];
				};
			};
		};
	};
	invite_server_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Invite"];
				};
			};
		};
	};
	invite_server_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["InviteCreate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Invite"];
				};
			};
		};
	};
	report_create_server: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ReportCreate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Report"];
				};
			};
		};
	};
	session_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List session success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Session"];
				};
			};
		};
	};
	session_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SessionCreate"];
			};
		};
		responses: {
			/** @description success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["SessionWithToken"];
				};
			};
		};
	};
	session_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Session id */
				session_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Session"];
				};
			};
		};
	};
	session_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Session id */
				session_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	session_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Session id */
				session_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SessionPatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Session"];
				};
			};
			/** @description not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Session"];
				};
			};
		};
	};
	invite_channel_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Invite"];
				};
			};
		};
	};
	invite_channel_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["InviteCreate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Invite"];
				};
			};
		};
	};
	thread_member_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_ThreadMember"];
				};
			};
		};
	};
	thread_member_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ThreadMember"];
				};
			};
		};
	};
	thread_member_add: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ThreadMemberPut"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ThreadMember"];
				};
			};
			/** @description not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	thread_member_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	user_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
				filter?: null | components["schemas"]["UserListFilter"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaginationResponse_User"];
				};
			};
		};
	};
	block_add: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Target user's id */
				target_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	block_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Target user's id */
				target_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	dm_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Target user's id */
				target_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	dm_init: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Target user's id */
				target_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description already exists */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description new dm created */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	friend_add: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Target user's id */
				target_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	friend_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Target user's id */
				target_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	user_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserWithRelationship"];
				};
			};
		};
	};
	user_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	user_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UserPatch"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
			/** @description not modified */
			304: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	user_audit_logs: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_AuditLogEntry"];
				};
			};
		};
	};
	block_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description User id to list blocks from */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_RelationshipWithUserId"];
				};
			};
		};
	};
	connection_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Connection"];
				};
			};
		};
	};
	connection_revoke: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
				/** @description Application id */
				app_id: components["schemas"]["Id"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	dm_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description user id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Channel"];
				};
			};
		};
	};
	email_list: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["EmailInfo"][];
				};
			};
		};
	};
	email_add: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
				/** @description email address */
				addr: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description already exists */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description success */
			201: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	email_delete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
				/** @description email address */
				addr: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	email_update: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
				/** @description email address */
				addr: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["EmailInfoPatch"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	email_verification_resend: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
				/** @description email address */
				addr: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	email_verification_finish: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
				/** @description email address */
				addr: string;
				/** @description Verification code */
				code: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	friend_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description User id to list friends from */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_RelationshipWithUserId"];
				};
			};
		};
	};
	invite_user_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json":
						components["schemas"]["PaginationResponse_Invite"];
				};
			};
		};
	};
	invite_user_create: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["InviteCreate"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Invite"];
				};
			};
		};
	};
	user_room_list: {
		parameters: {
			query?: {
				from?: string;
				to?: string;
				dir?: "b" | "f";
				limit?: number;
			};
			header?: never;
			path: {
				/** @description user id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PaginationResponse_Room"];
				};
			};
		};
	};
	user_set_status: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["StatusPatch"];
			};
		};
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	user_suspend: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SuspendRequest"];
			};
		};
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
		};
	};
	user_unsuspend: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["User"];
				};
			};
		};
	};
	user_undelete: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	voice_region_list: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	voice_state_list: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: string;
				/** @description User id */
				user_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	voice_state_get: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	voice_state_disconnect: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description ok */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	voice_state_move: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Thread id */
				thread_id: components["schemas"]["Id"];
				/** @description User id */
				user_id: components["schemas"]["UserIdReq"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VoiceStateMove"];
			};
		};
		responses: {
			/** @description ok */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": unknown;
				};
			};
		};
	};
	get_webhook: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Get webhook success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Webhook"];
				};
			};
		};
	};
	delete_webhook: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Delete webhook success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	update_webhook: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["WebhookUpdate"];
			};
		};
		responses: {
			/** @description Update webhook success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Webhook"];
				};
			};
		};
	};
	get_webhook_with_token: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: components["schemas"]["Id"];
				/** @description Webhook token */
				token: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Get webhook success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Webhook"];
				};
			};
		};
	};
	execute_webhook: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: components["schemas"]["Id"];
				/** @description Webhook token */
				token: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Execute webhook success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	delete_webhook_with_token: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: components["schemas"]["Id"];
				/** @description Webhook token */
				token: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Delete webhook success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	update_webhook_with_token: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: components["schemas"]["Id"];
				/** @description Webhook token */
				token: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["WebhookUpdate"];
			};
		};
		responses: {
			/** @description Update webhook success */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Webhook"];
				};
			};
		};
	};
	execute_webhook_discord: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: components["schemas"]["Id"];
				/** @description Webhook token */
				token: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Execute webhook success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	execute_webhook_github: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: components["schemas"]["Id"];
				/** @description Webhook token */
				token: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Execute webhook success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	execute_webhook_slack: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Webhook id */
				webhook_id: components["schemas"]["Id"];
				/** @description Webhook token */
				token: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Execute webhook success */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
